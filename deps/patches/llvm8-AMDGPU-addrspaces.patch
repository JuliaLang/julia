From 9d25d80ebd46b7651f22ea59d904c8833c83cf3c Mon Sep 17 00:00:00 2001
From: Julian P Samaroo <jpsamaroo@jpsamaroo.me>
Date: Sun, 12 May 2019 00:00:00 -0500
Subject: [PATCH] AMDGPU ignore custom AS

---
 lib/Target/AMDGPU/AMDGPU.h           | 1 +
 lib/Target/AMDGPU/SIISelLowering.cpp | 3 ++-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/lib/Target/AMDGPU/AMDGPU.h b/lib/Target/AMDGPU/AMDGPU.h
index 55668867cc8..0b6de567051 100644
--- a/lib/Target/AMDGPU/AMDGPU.h
+++ b/lib/Target/AMDGPU/AMDGPU.h
@@ -289,6 +289,7 @@ namespace AMDGPUAS {
     CONSTANT_BUFFER_13 = 21,
     CONSTANT_BUFFER_14 = 22,
     CONSTANT_BUFFER_15 = 23,
+    LAST = CONSTANT_BUFFER_15,

     // Some places use this if the address space can't be determined.
     UNKNOWN_ADDRESS_SPACE = ~0u,
diff --git a/lib/Target/AMDGPU/SIISelLowering.cpp b/lib/Target/AMDGPU/SIISelLowering.cpp
index 12113fcc1fc..7e4cd209788 100644
--- a/lib/Target/AMDGPU/SIISelLowering.cpp
+++ b/lib/Target/AMDGPU/SIISelLowering.cpp
@@ -1009,6 +1009,8 @@ bool SITargetLowering::isLegalAddressingMode(const DataLayout &DL,
     // addressing modes, so treat them as having no offset like flat
     // instructions.
     return isLegalFlatAddressingMode(AM);
+  } else if (AS > AMDGPUASI.LAST) {
+    return true;
   } else {
     llvm_unreachable("unhandled address space");
   }
--- a/lib/Target/AMDGPU/SIISelLowering.cpp
+++ b/lib/Target/AMDGPU/SIISelLowering.cpp
@@ -1210,7 +1210,8 @@ static bool isFlatGlobalAddrSpace(unsigned AS) {

 bool SITargetLowering::isNoopAddrSpaceCast(unsigned SrcAS,
                                            unsigned DestAS) const {
-  return isFlatGlobalAddrSpace(SrcAS) && isFlatGlobalAddrSpace(DestAS);
+  return (isFlatGlobalAddrSpace(SrcAS, AMDGPUASI) || SrcAS > AMDGPUASI.LAST) &&
+         (isFlatGlobalAddrSpace(DestAS, AMDGPUASI) || DestAS > AMDGPUASI.LAST);
 }

 bool SITargetLowering::isMemOpHasNoClobberedMemOperand(const SDNode *N) const {
--
2.18.1

