.\" To get a preview of the man page as it will actually be displayed, run
.\"
.\" > nroff -man julia.1 | less
.\"
.\" at the terminal.
.\"
.\" Suggestions and improvements very much appreciated!
.\" Nothing is too large or too small.
.\" This man page was largely taken from pre-existing sources of documentation.
.\" This is documented by comments in the man page's source.
.\"
.\" # TODOs:
.\" 1. Simple, hopefully portable way to get the man page on everyone's manpath.
.\"    (The whole point was to be able to simply `man julia`!)
.\"
.\" Possible sections to add to man page:
.\" - licensing
.\" - internet resources and/or documentation
.\" - environment
.\" - see also
.\" - diagnostics
.\" - notes

.TH JULIA 1 2022-02-17 JULIA

.\" from the front page of https://julialang.org/
.SH NAME
julia - a high-level, high-performance dynamic programming language for technical computing

.SH SYNOPSIS
\fBjulia\fR [OPTIONS...] \fB--\fR [PROGRAMMFILE] [ARGS...]

If a Julia source file is given as a \fIPROGRAMFILE\fP (optionally followed by
arguments in \fIARGS\fP) Julia will execute the program and exit.

.SH DESCRIPTION
Julia is a high-level, high-performance dynamic programming language
for technical computing, with syntax that is familiar to users
of other technical computing environments.
It provides a sophisticated compiler, distributed parallel execution,
numerical accuracy, and an extensive mathematical function library.
The library, largely written in Julia itself, also integrates mature,
best-of-breed C and Fortran libraries for linear algebra,
random number generation, signal processing, and string processing.
In addition, the Julia developer community is contributing a number of
external packages through Julia's built-in package manager at a rapid pace.
Julia programs are organized around multiple dispatch;
by defining functions and overloading them for different combinations
of argument types, which can also be user-defined.
For a more in-depth discussion of the rationale and advantages of Julia
over other systems, please see the online manual:
https://docs.julialang.org

.SH "COMMAND-LINE OPTIONS"

.TP
-v, --version
Display version information

.TP
-h, --help
Print help message

.TP
--help-hidden
Print uncommon options not shown by `-h`

.TP
--project[=<dir>/@.]
Set <dir> as the home project/environment. The default @. option will search
through parent directories until a Project.toml or JuliaProject.toml file is
found.

.TP
-J, --sysimage <file>
Start up with the given system image file

.TP
-H, --home <dir>
Set location of julia executable

.TP
--startup-file={yes*|no}
Load `JULIA_DEPOT_PATH/config/startup.jl`; if `JULIA_DEPOT_PATH`
environment variable is unset, load `~/.julia/config/startup.jl`

.TP
--handle-signals={yes*|no}
Enable or disable Julia's default signal handlers

.TP
--sysimage-native-code={yes*|no}
Use native code from system image if available

.TP
--compiled-modules={yes*|no}
Enable or disable incremental precompilation of modules

.TP
-e, --eval <expr>
Evaluate <expr>

.TP
-E, --print <expr>
Evaluate <expr> and display the result

.TP
-L, --load <file>
Load <file> immediately on all processors

.TP
-t, --threads <n>
Enable n threads; "auto" tries to infer a useful default number
of threads to use but the exact behavior might change in the future.
Currently, "auto" uses the number of CPUs assigned to this julia
process based on the OS-specific affinity assignment interface, if
supported (Linux and Windows). If this is not supported (macOS) or
process affinity is not configured, it uses the number of CPU
threads.

.TP
-p, --procs {N|auto}
Integer value N launches N additional local worker processes `auto` launches as many workers
as the number of local CPU threads (logical cores)

.TP
--machine-file <file>
Run processes on hosts listed in <file>

.TP
-i
Interactive mode; REPL runs and `isinteractive()` is true

.TP
-q, --quiet
Quiet startup: no banner, suppress REPL warnings

.TP
--banner={yes|no|auto*}
Enable or disable startup banner

.TP
--color={yes|no|auto*}
Enable or disable color text

.TP
--history-file={yes*|no}
Load or save history

.TP
--depwarn={yes|no*|error}
Enable or disable syntax and method deprecation warnings (`error` turns warnings into errors)

.TP
--warn-overwrite={yes|no*}
Enable or disable method overwrite warnings

.TP
--warn-scope={yes*|no}
Enable or disable warning for ambiguous top-level scope

.TP
-C, --cpu-target=<target>
Limit usage of CPU features up to <target>; set to `help` to see the available options

.TP
-O, --optimize={0,1,2*,3}
Set the optimization level (level 3 if `-O` is used without a level)

.TP
--min-optlevel={0*,1,2,3}
Set a lower bound on the optimization level

.TP
-g {0,1*,2}
Set the level of debug info generation (level 2 if `-g` is used without a level)

.TP
--inline={yes*|no}
Control whether inlining is permitted, including overriding @inline declarations

.TP
--check-bounds={yes|no|auto*}
Emit bounds checks always, never, or respect @inbounds declarations

.TP
--math-mode={ieee|user}
Disallow or enable unsafe floating point optimizations (overrides @fastmath declaration)

.TP
--code-coverage[={none*|user|all}]
Count executions of source lines (omitting setting is equivalent to `user`)

.TP
--code-coverage=@<path>
Count executions of source lines in a file or files under a given directory. A `@` must
be placed before the path to indicate this option. A `@` with no path will track the current directory.

.TP
 --code-coverage=tracefile.info
 Append coverage information to the LCOV tracefile (filename supports format tokens)

.TP
--track-allocation[={none*|user|all}]
Count bytes allocated by each source line (omitting setting is equivalent to `user`)

.TP
--track-allocation=@<path>
Count bytes allocated by each source line in a file or files under a given directory. A `@`
must be placed before the path to indicate this option. A `@` with no path will track the current directory.

.TP
--bug-report=KIND
Launch a bug report session. It can be used to start a REPL, run a script, or evaluate
expressions. It first tries to use BugReporting.jl installed in current environment and
fallbacks to the latest compatible BugReporting.jl if not. For more information, see
--bug-report=help.

.TP
--heap-size-hint=<size>
Forces garbage collection if memory usage is higher than that value. The memory hint might be
specified in megabytes (500M) or gigabytes (1.5G)

.TP
--compile={yes*|no|all|min}
Enable or disable JIT compiler, or request exhaustive or minimal compilation

.TP
--output-o <name>
Generate an object file (including system image data)

.TP
--output-ji <name>
Generate a system image data file (.ji)

.TP
--strip-metadata
Remove docstrings and source location info from system image

.TP
--strip-ir
Remove IR (intermediate representation) of compiled functions

.TP
--output-unopt-bc <name>
Generate unoptimized LLVM bitcode (.bc)

.TP
--output-bc <name>
Generate LLVM bitcode (.bc)

.TP
--output-asm <name>
Generate an assembly file (.s)

.TP
--output-incremental={yes|no*}
Generate an incremental output file (rather than complete)

.TP
--trace-compile={stderr,name}
Print precompile statements for methods compiled during execution or save to a path

.TP
-image-codegen
Force generate code in imaging mode

.SH FILES AND ENVIRONMENT
See https://docs.julialang.org/en/v1/manual/environment-variables/

.SH BUGS
Please report any bugs using the GitHub issue tracker:
https://github.com/julialang/julia/issues?state=open


.SH AUTHORS
Contributors: https://github.com/JuliaLang/julia/graphs/contributors
