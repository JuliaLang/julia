.\" To get a preview of the man page as it will actually be displayed, run
.\"
.\" > nroff -man julia.1 | less
.\"
.\" at the terminal.
.\"
.\" Suggestions and improvements very much appreciated!
.\" Nothing is too large or too small.
.\" This man page was largely taken from pre-existing sources of documentation.
.\" This is documented by comments in the man page's source.
.\"
.\" # TODOs:
.\" 1. Simple, hopefully portable way to get the man page on everyone's manpath.
.\"    (The whole point was to be able to simply `man julia`!)
.\"
.\" Possible sections to add to man page:
.\" - licensing
.\" - internet resources and/or documentation
.\" - environment
.\" - see also
.\" - diagnostics
.\" - notes

.TH JULIA 1 2013-12-10 Julia "Julia Programmers' Reference Guide"

.\" from the front page of https://julialang.org/
.SH NAME
julia - high-level, high-performance dynamic programming language for technical computing

.SH SYNOPSIS
julia [option] [program] [args..]

.\" Taken almost verbatim from the front page of https://julialang.org/
.SH DESCRIPTION
Julia is a high-level, high-performance dynamic programming language
for technical computing, with syntax that is familiar to users
of other technical computing environments.
It provides a sophisticated compiler, distributed parallel execution,
numerical accuracy, and an extensive mathematical function library.
The library, largely written in Julia itself, also integrates mature,
best-of-breed C and Fortran libraries for linear algebra,
random number generation, signal processing, and string processing.
In addition, the Julia developer community is contributing a number of
external packages through Julia's built-in package manager at a rapid pace.
Julia programs are organized around multiple dispatch;
by defining functions and overloading them for different combinations
of argument types, which can also be user-defined.
For a more in-depth discussion of the rationale and advantages of Julia
over other systems, please see the online manual:
https://docs.julialang.org/en/latest/

If a Julia source file is given as a \fIprogram\fP (optionally followed by
 arguments in \fIargs\fP) Julia will execute the program and exit.

.\" This section was taken nearly verbatim from the output of `julia --help`
.SH "COMMAND-LINE OPTIONS"

.TP
-v, --version
Display version information

.TP
-h, --help
Print help message

.TP
--project[=<dir>/@.]
Set <dir> as the home project/environment. The default @. option will search
through parent directories until a Project.toml or JuliaProject.toml file is
found.

.TP
-J, --sysimage <file>
Start up with the given system image file

.TP
--sysimage-native-code={yes|no}
Use precompiled code from system image if available

.TP
-H, --home <dir>
Set location of julia executable

.TP
--startup-file={yes|no}
Load ~/.julia/config/startup.jl

.TP
--handle-signals={yes|no}
Enable or disable Julia's default signal handlers

.TP
-e, --eval <expr>
Evaluate <expr>

.TP
-E, --print <expr>
Evaluate <expr> and display the result

.TP
-L, --load <file>
Load <file> immediately on all processors

.TP
-t, --threads <n>
Enable n threads

.TP
-p, --procs <n>
Run n local processes

.TP
--machine-file <file>
Run processes on hosts listed in <file>

.TP
-i
Interactive mode; REPL runs and isinteractive() is true

.TP
--banner={yes|no|auto}
Enable or disable startup banner

.TP
--color={yes|no|auto}
Enable or disable color text

.TP
--history-file={yes|no}
Load or save history

.TP
--compile={yes|no|all}
Enable or disable compiler, or request exhaustive compilation

.TP
-C, --cpu-target=<target>
Limit usage of cpu features up to <target>

.TP
-O, --optimize
Run time-intensive code optimizations

.TP
-O <n>, --optimize=<n>
Set the optimization level to <n>

.TP
-g
Enable generation of full debug info

.TP
-g <n>
Set the level of debug info generation to <n>

.TP
--inline={yes|no}
Control whether inlining is permitted (overrides functions declared as @inline)

.TP
--check-bounds={yes|no}
Emit bounds checks always or never (ignoring declarations)

.TP
--math-mode={ieee|user}
Always use IEEE semantics for math (ignoring declarations),
or adhere to declarations in source code

.TP
--depwarn={yes|no|error}
Enable or disable syntax and method deprecation warnings ('error' turns warnings into errors)

.TP
--warn-overwrite={yes|no}
Enable or disable method overwrite warnings

.TP
--output-o <name>
Generate an object file (including system image data)

.TP
--output-ji <name>
Generate a system image data file (.ji)

.TP
--output-bc <name>
Generate LLVM bitcode (.bc)

.TP
--output-incremental={yes|no}
Generate an incremental output file (rather than complete)

.TP
--code-coverage={none|user|all}, --code-coverage
Count executions of source lines (omitting setting is equivalent to 'user')

.TP
--track-allocation={none|user|all}, --track-allocation
Count bytes allocated by each source line

.SH FILES
.I ~/.julia/config/startup.jl
.RS
Per user startup file.
.RE

.I /etc/julia/startup.jl
.RS
System-wide startup file.
.RE

.SH BUGS
Please report any bugs using the GitHub issue tracker:
https://github.com/julialang/julia/issues?state=open

.SH AUTHORS
Contributors: https://github.com/JuliaLang/julia/graphs/contributors
