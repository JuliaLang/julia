include("robin_dict.jl")

const ALLOWABLE_USELESS_GROWTH = 0.25

"""
    Dict([itr])

`Dict{K,V}()` constructs a ordered dictionary with keys of type `K` and values of type `V`.
It takes advantage of `RobinDict` in maintaining the order of the keys.
Given a single iterable argument, constructs a [`Dict`](@ref) whose key-value pairs
are taken from 2-tuples `(key,value)` generated by the argument.


# Examples
```jldoctest
julia> Dict([("A", 1), ("B", 2)])
Dict{String,Int64} with 2 entries:
  "A" => 1
  "B" => 2
```

Alternatively, a sequence of pair arguments may be passed.

```jldoctest
julia> Dict("A"=>1, "B"=>2)
Dict{String,Int64} with 2 entries:
  "A" => 1
  "B" => 2
```
"""
mutable struct Dict{K,V} <: AbstractDict{K,V}
    dict::RobinDict{K, Int32}
    keys::Vector{K}
    vals::Vector{V}
    count::Int32

    function Dict{K, V}() where {K, V}
        new{K, V}(RobinDict{K, Int32}(), Vector{K}(), Vector{V}(), 0)
    end

    function Dict{K, V}(d::Dict{K, V}) where {K, V}
        new{K, V}(copy(d.dict), copy(d.keys), copy(d.vals), d.count)
    end

    function Dict{K,V}(kv) where {K, V}
        h = Dict{K,V}()
        for (k,v) in kv
            h[k] = v
        end
        return h
    end
    Dict{K,V}(p::Pair) where {K,V} = setindex!(Dict{K,V}(), p.second, p.first)
    function Dict{K,V}(ps::Pair...) where V where K
        h = Dict{K,V}()
        sizehint!(h, length(ps))
        for p in ps
            h[p.first] = p.second
        end
        return h
    end
end

Dict() = Dict{Any,Any}()
Dict(kv::Tuple{}) = Dict()
Base.copy(d::Dict) = Dict(d)
Base.empty(d::Dict, ::Type{K}, ::Type{V}) where {K, V} = Dict{K, V}()

Dict(ps::Pair{K,V}...) where {K,V} = Dict{K,V}(ps)
Dict(ps::Pair...)                  = Dict(ps)

Dict(d::AbstractDict{K, V}) where {K, V} = Dict{K, V}(d)

function Dict(kv)
    try
        return dict_with_eltype((K, V) -> Dict{K, V}, kv, eltype(kv))
    catch e
        if !isiterable(typeof(kv)) || !all(x -> isa(x, Union{Tuple,Pair}), kv)
            !all(x->isa(x,Union{Tuple,Pair}),kv)
            throw(ArgumentError("Dict(kv): kv needs to be an iterator of tuples or pairs"))
        else
            rethrow(e)
        end
    end
end

Base.empty(d::Dict{K,V}) where {K,V} = Dict{K,V}()

Base.length(d::Union{RobinDict, Dict}) = d.count
Base.isempty(d::Union{RobinDict, Dict}) = (length(d) == 0)

"""
    empty!(collection) -> collection

Remove all elements from a `collection`.

# Examples
```jldoctest
julia> A = Dict("a" => 1, "b" => 2)
Dict{String,Int64} with 2 entries:
  "a" => 1
  "b" => 2

julia> empty!(A);

julia> A
Dict{String,Int64} with 0 entries
```
"""
function Base.empty!(h::Dict{K,V}) where {K, V}
    empty!(h.dict)
    empty!(h.keys)
    empty!(h.vals)
    h.count = 0
    return h
end

function _setindex!(h::Dict, v, key)
    hk, hv = h.keys, h.vals
    push!(hk, key)
    push!(hv, v)
    nk = length(hk)
    @inbounds h.dict[key] = Int32(nk)
    h.count += 1
end

function Base.setindex!(h::Dict{K, V}, v0, key0) where {K,V}
    key = convert(K, key0)
    v = convert(V, v0)
    index = get(h.dict, key, -2)

    if index < 0
        _setindex!(h, v0, key0)
    else
        @assert haskey(h, key0)
        @inbounds orig_v = h.vals[index]
        (orig_v != v0) && (@inbounds h.vals[index] = v0)
    end

    check_for_rehash(h) && rehash!(h)

    return h
end

# rehash when there are ALLOWABLE_USELESS_GROWTH %
# tombstones, or non-mirrored entries in the dictionary
function check_for_rehash(h::Dict)
    keysl = length(h.keys)
    dictl = length(h)
    return (keysl > (1 + ALLOWABLE_USELESS_GROWTH)*dictl)
end

function rehash!(h::Dict{K, V}) where {K, V}
    keys = h.keys
    vals = h.vals
    hk = Vector{K}()
    hv = Vector{V}()

    for (idx, (k, v)) in enumerate(zip(keys, vals))
        if get(h.dict, k, -1) == idx
            push!(hk, k)
            push!(hv, v)
        end
    end

    h.keys = hk
    h.vals = hv

    for (idx, k) in enumerate(h.keys)
        h.dict[k] = idx
    end
    return h
end

function Base.sizehint!(d::Dict, newsz)
    oldsz = length(d)
    # grow at least 25%
    if newsz < (oldsz*5)>>2
        return d
    end
    sizehint!(d.keys, newsz)
    sizehint!(d.vals, newsz)
    sizehint!(d.dict, newsz)
    return d
end

"""
    get!(collection, key, default)

Return the value stored for the given key, or if no mapping for the key is present, store
`key => default`, and return `default`.

# Examples
```jldoctest
julia> d = Dict("a"=>1, "b"=>2, "c"=>3);

julia> get!(d, "a", 5)
1

julia> get!(d, "d", 4)
4

julia> d
Dict{String,Int64} with 4 entries:
  "a" => 1
  "b" => 2
  "c" => 3
  "d" => 4
```
"""
function Base.get!(h::Dict{K,V}, key0, default) where {K,V}
    index = get(h.dict, key0, -2)
    index > 0 && return h.vals[index]
    v = convert(V, default)
    setindex!(h, v, key0)
    return v
end

"""
    get!(f::Function, collection, key)

Return the value stored for the given key, or if no mapping for the key is present, store
`key => f()`, and return `f()`.

This is intended to be called using `do` block syntax:
```julia
get!(dict, key) do
    # default value calculated here
    time()
end
```
"""
function Base.get!(default::Base.Callable, h::Dict{K,V}, key0) where {K,V}
    index = get(h.dict, key0, -2)
    index > 0 && return @inbounds h.vals[index]
    
    v = convert(V, default())
    setindex!(h, v, key0)
    return v
end

function Base.getindex(h::Dict{K,V}, key) where {K,V}
    index = get(h.dict, key, -1)
    return (index < 0) ? throw(KeyError(key)) : @inbounds h.vals[index]::V
end

"""
    get(collection, key, default)

Return the value stored for the given key, or the given default value if no mapping for the
key is present.

# Examples
```jldoctest
julia> d = Dict("a"=>1, "b"=>2);

julia> get(d, "a", 3)
1

julia> get(d, "c", 3)
3
```
"""
function Base.get(h::Dict{K,V}, key, default) where {K,V}
    index = get(h.dict, key, -1)
    return (index < 0) ? default : @inbounds h.vals[index]::V
end

"""
    get(f::Function, collection, key)

Return the value stored for the given key, or if no mapping for the key is present, return
`f()`.  Use [`get!`](@ref) to also store the default value in the dictionary.

This is intended to be called using `do` block syntax

```julia
get(dict, key) do
    # default value calculated here
    time()
end
```
"""
function Base.get(default::Base.Callable, h::Dict{K,V}, key) where {K,V}
    index = get(h.dict, key, -1)
    return (index < 0) ? default() : @inbounds h.vals[index]::V
end

"""
    haskey(collection, key) -> Bool

Determine whether a collection has a mapping for a given `key`.

# Examples
```jldoctest
julia> D = Dict('a'=>2, 'b'=>3)
Dict{Char,Int64} with 2 entries:
  'a' => 2
  'b' => 3

julia> haskey(D, 'a')
true

julia> haskey(D, 'c')
false
```
"""
Base.haskey(h::Dict, key) = (get(h.dict, key, -2) > 0)
Base.in(key, v::Base.KeySet{K,T}) where {K,T<:Dict{K}} = (get(v.dict, key, -1) >= 0)

"""
    getkey(collection, key, default)

Return the key matching argument `key` if one exists in `collection`, otherwise return `default`.

# Examples
```jldoctest
julia> D = Dict('a'=>2, 'b'=>3)
Dict{Char,Int64} with 2 entries:
  'a' => 2
  'b' => 3

julia> getkey(D, 'a', 1)
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)

julia> getkey(D, 'd', 'a')
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
```
"""
function Base.getkey(h::Dict{K,V}, key, default) where {K,V}
    index = get(h.dict, key, -1)
    return (index < 0) ? default : h.keys[index]::K
end

Base.@propagate_inbounds isslotfilled(h::Dict, index) = (h.dict[h.keys[index]] == index)

#Added:
Base.@propagate_inbounds isslotempty(h::Dict, index) = (h.dict[h.keys[index]] != index)

#maybe rather reuse this:
#Base.@propagate_inbounds isslotfilled(h::RobinDict, index) = (h.hashes[index] != 0)
#Base.@propagate_inbounds isslotempty(h::RobinDict, index) = (h.hashes[index] == 0)


function _pop!(h::Dict, index)
    @inbounds val = h.vals[index]
    _delete!(h, index)
    return val
end

function Base.pop!(h::Dict)
    check_for_rehash(h) && rehash!(h)
    index = length(h.keys)
    while (index > 0)
        isslotfilled(h, index) && break
        index -= 1
    end
    index == 0 && rehash!(h)
    @inbounds key = h.keys[index]
    return key => _pop!(h, index)
end

function Base.pop!(h::Dict, key)
    index = get(h.dict, key, -1)
    (index > 0) ? _pop!(h, index) : throw(KeyError(key))
end

"""
    pop!(collection, key[, default])

Delete and return the mapping for `key` if it exists in `collection`, otherwise return
`default`, or throw an error if `default` is not specified.

# Examples
```jldoctest
julia> d = Dict("a"=>1, "b"=>2, "c"=>3);

julia> pop!(d, "a")
1

julia> pop!(d, "d")
ERROR: KeyError: key "d" not found
Stacktrace:
[...]

julia> pop!(d, "e", 4)
4
```
"""
function Base.pop!(h::Dict, key, default)
    index = get(h.dict, key, -1)
    (index > 0) ? _pop(h, index) : default
end

"""
    delete!(collection, key)

Delete the mapping for the given key in a collection, and return the collection.

# Examples
```jldoctest
julia> d = Dict("a"=>1, "b"=>2)
Dict{String,Int64} with 2 entries:
  "a" => 1
  "b" => 2

julia> delete!(d, "b")
Dict{String,Int64} with 1 entry:
  "a" => 1
```
"""
function Base.delete!(h::Dict, key)
    pop!(h, key)
    return h
end

function _delete!(h::Dict, index)
    @inbounds h.dict[h.keys[index]] = -1
    h.count -= 1
    check_for_rehash(h) ? rehash!(h) : h
end

function get_first_filled_index(h::Dict)
    index = 1
    while (true)
        isslotfilled(h, index) && return index
        index += 1
    end
end

function get_next_filled_index(h::Dict, index)
    # get the next filled slot, including index and beyond
    while (index <= length(h.keys))
        isslotfilled(h, index) && return index
        index += 1
    end
    return -1
end

Base.@propagate_inbounds function Base.iterate(h::Dict)
    isempty(h) && return nothing
    check_for_rehash(h) && rehash!(h)
    index = get_first_filled_index(h)
    return (Pair(h.keys[index], h.vals[index]), index+1)
end

Base.@propagate_inbounds function Base.iterate(h::Dict, i)
    length(h.keys) < i && return nothing
    index = get_next_filled_index(h, i)
    (index < 0) && return nothing
    return (Pair(h.keys[index], h.vals[index]), index+1)
end

Base.filter!(f, d::Union{RobinDict, Dict}) = Base.filter_in_one_pass!(f, d)

function Base.merge(d::Dict, others::AbstractDict...)
    K,V = _merge_kvtypes(d, others...)
    merge!(Dict{K,V}(), d, others...)
end

function Base.merge(combine::Function, d::Dict, others::AbstractDict...)
    K,V = _merge_kvtypes(d, others...)
    merge!(combine, Dict{K,V}(), d, others...)
end

isordered(::Type{T}) where {T <: Dict} = true

const AnyDict = Dict{Any,Any}
