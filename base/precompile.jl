include = include_from_node1

# prime method cache with some things we know we'll need right after startup
precompile(pwd, ())
precompile(fdio, (Int32,))
precompile(ProcessGroup, (Int, Array{Any,1}, Array{Any,1}))
precompile(next, (Dict{Any,Any}, Int))
precompile(start, (Dict{Any,Any},))
precompile(perform_work, ())
precompile(isempty, (Array{Any,1},))
precompile(getindex, (Dict{Any,Any}, Int32))
precompile(event_loop, (Bool,))
precompile(_start, ())
precompile(process_options, (Array{Any,1},))
precompile(run_repl, ())
precompile(any, (Function, Array{Any,1}))
precompile(Dict{Any,Any}, (Int,))
precompile(Set, ())
precompile(setindex!, (Dict{Any,Any}, Bool, Cmd))
precompile(rehash, (Dict{Any,Any}, Int))
precompile(wait, (Int32,))
precompile(systemerror, (Symbol, Bool))
precompile(SystemError, (ASCIIString,))
precompile(has, (EnvHash, ASCIIString))
precompile(parse_input_line, (ASCIIString,))
precompile(cmp, (Int32, Int32))
precompile(min, (Int32, Int32))
precompile(==, (ASCIIString, ASCIIString))
precompile(arg_gen, (ASCIIString,))
precompile(Random.librandom_init, ())
precompile(Random.srand, (ASCIIString, Int))
precompile(Random.srand, (Uint64,))
precompile(open, (ASCIIString, Bool, Bool, Bool, Bool))
precompile(done, (IntSet, Int64))
precompile(next, (IntSet, Int64))
precompile(ht_keyindex, (Dict{Any,Any}, Int32))
precompile(perform_work, (Task,))
precompile(notify_full, (RemoteValue,))
precompile(notify_empty, (RemoteValue,))
precompile(work_result, (RemoteValue,))
precompile(take, (RemoteValue,))
precompile(wait_full, (RemoteValue,))
precompile(enq_work, (Task,))
precompile(string, (Int,))
precompile(parseint, (Type{Int}, ASCIIString, Int))
precompile(repeat, (ASCIIString, Int))
precompile(KeyError, (Int,))
precompile(show, (Float64,))
precompile(match, (Regex, ASCIIString))
precompile(length, (ASCIIString,))
precompile(alignment, (Float64,))
precompile(repl_callback, (Expr, Int))
precompile(istaskdone, (Task,))
precompile(int, (Uint64,))
precompile(copy, (Bool,))
precompile(bool, (Bool,))
precompile(bool, (RemoteRef,))
precompile(wait, (RemoteRef,))
precompile(hash, (RemoteRef,))
precompile(take, (RemoteRef,))
precompile(bitmix, (Int, Int))
precompile(bitmix, (Uint, Int))
precompile(bitmix, (Uint64, Int64))
precompile(hash, (Int,))
precompile(isequal, (Symbol, Symbol))
precompile(isequal, (Bool, Bool))
precompile(get, (EnvHash, ASCIIString, ASCIIString))
precompile(rr2id, (RemoteRef,))
precompile(isequal, (RemoteRef, WeakRef))
precompile(isequal, (RemoteRef, RemoteRef))
precompile(_ieval, (Symbol,))
precompile(static_convert, (Nothing, Nothing))
precompile(setindex!, (Array{Any,1}, WeakRef, Int))
precompile(isequal, ((Int,Int),(Int,Int)))
precompile(isequal, (Int,Int))
precompile(RemoteRef, (Int, Int, Int))
precompile(eval_user_input, (Expr, Bool))
precompile(print, (Float64,))
precompile(a2t, (Array{Any,1},))
precompile(flush, (IOStream,))
precompile(getindex, (Type{ByteString}, ASCIIString, ASCIIString))
precompile(bytestring, (ASCIIString,))
precompile(int, (Int,))
precompile(uint, (Uint,))
precompile(_atexit, ())
precompile(read, (IOStream, Array{Uint32,1}))
precompile(hex, (Char, Int))
precompile(abs, (Char,))
precompile(abstract_eval, (LambdaStaticData, ObjectIdDict, StaticVarInfo))
precompile(length, (Range1{Int},))
precompile(start, (Range1{Int},))
precompile(done, (Range1{Int},Int))
precompile(next, (Range1{Int},Int))
precompile(IOStream, (ASCIIString, Array{Uint8,1}))
precompile(mk_tupleref, (SymbolNode, Int))
precompile(abstract_interpret, (Bool, ObjectIdDict, StaticVarInfo))
precompile(eval_annotate, (LambdaStaticData, ObjectIdDict, StaticVarInfo, ObjectIdDict, Array{Any,1}))
precompile(occurs_more, (Bool, Function, Int))
precompile(isconstantfunc, (SymbolNode, StaticVarInfo))
precompile(CallStack, (Expr, Module, (Nothing,), EmptyCallStack))
precompile(convert, (Type{Module}, Module))
precompile(effect_free, (Expr,))
precompile(effect_free, (TopNode,))
precompile(abspath, (ASCIIString,))
precompile(isabspath, (ASCIIString,))
precompile(split, (ASCIIString,))
precompile(split, (ASCIIString, ASCIIString, Int, Bool))
precompile(split, (ASCIIString, Regex, Int, Bool))
precompile(print_joined, (IOBuffer, Array{String,1}, ASCIIString))
precompile(beginswith, (ASCIIString, ASCIIString))
precompile(resolve_globals, (Symbol, Module, Module, Vector{Any}, Vector{Any}))
precompile(resolve_globals, (SymbolNode, Module, Module, Vector{Any}, Vector{Any}))
precompile(BitArray, (Int,))
precompile(getindex, (BitArray{1}, Int,))
precompile(setindex!, (BitArray{1}, Bool, Int,))
precompile(fill!, (BitArray{1}, Bool))
precompile(pop!, (Array{Any,1},))
precompile(unshift!, (Array{Any,1}, Task))
precompile(nnz, (BitArray{1},))
precompile(get_chunks_id, (Int,))
precompile(occurs_more, (Uint8, Function, Int))
precompile(abstract_eval_arg, (Uint8, ObjectIdDict, StaticVarInfo))
precompile(occurs_outside_tupleref, (Function, Symbol, StaticVarInfo, Int))
precompile(search, (ASCIIString, Regex, Int))
precompile(setindex!, (Vector{Any}, Uint8, Int))
precompile(setindex!, (Vector{Any}, Vector{Any}, Int))
precompile(first, (Range1{Int},))
precompile(last, (Range1{Int},))
precompile(isempty, (ASCIIString,))
precompile(normpath, (ASCIIString,))
precompile(print, (ASCIIString,))
precompile(println, (TTY,))
precompile(print, (TTY,Char))
precompile(==, (Bool,Bool))
precompile(try_include, (ASCIIString,))
precompile(isfile, (ASCIIString,))
precompile(include_from_node1, (ASCIIString,))
precompile(source_path, (Nothing,))
precompile(task_local_storage, ())
precompile(atexit, (Function,))
precompile(print, (TTY, ASCIIString))
precompile(close, (TTY,))
precompile(read_buffer, (TTY,Int))
precompile(put, (RemoteRef, Any))
precompile(getpid, ())
precompile(print, (IOStream, Int32))
precompile(show, (IOStream, Int32))
precompile(open, (ASCIIString, ASCIIString))
precompile(readline, (ASCIIString,))
precompile(endof, (Array{Any,1},))
precompile(sym_replace, (Uint8, Array{Any,1}, Array{Any,1}, Array{Any,1}, Array{Any,1}))
precompile(isslotempty, (Dict{Any,Any}, Int))
precompile(setindex!, (Array{Uint8,1}, Uint8, Int))
precompile(get, (Dict{Any,Any}, Symbol, ASCIIString))
precompile(*, (ASCIIString, ASCIIString, ASCIIString))
precompile(chop, (ASCIIString,))
precompile(ismatch, (Regex, ASCIIString))
precompile(!=, (Bool, Bool))
precompile(nextind, (ASCIIString, Int))
precompile(delete_var!, (Expr, Symbol))
precompile(close, (IOStream,))
precompile(haskey, (ObjectIdDict, Symbol))
# end of manually added items

precompile(Base.abstract_call_gf,(Function, (Any...,), (Any...,), (Any...,)))
precompile(Base.abspath,(ASCIIString, ASCIIString, ASCIIString...))
precompile(Base.setindex!,(Array{Any, 1}, Array{Uint8, 1}, Int64))
precompile(Base.joinpath,(ASCIIString, ASCIIString, ASCIIString, ASCIIString...))
precompile(Base.prevind,(ASCIIString, Int64))
precompile(Base.string,(ASCIIString,))
precompile(Base.setindex!,(Base.EnvHash, ASCIIString, ASCIIString))
precompile(Base.cconvert,(Type{Int32}, Bool))
precompile(Base.cconvert,(Type{Ptr{Uint8}}, ASCIIString))
precompile(Base.occurs_undef,(Symbol, Expr))
precompile(Base.map,(Function, (Any, Any, Any)))
precompile(Base.setindex!,(Array{Any, 1}, Nothing, Int64))
precompile(Base.start_reading,(Base.TTY,))
precompile(Base.notify_filled,(Base.TTY, Int64))
precompile(Base.start_reading,(Base.TTY, Function))
precompile(Base.setindex!,(Array{Any, 1}, TypeVar, Int64))
precompile(==,(Type{Any}, Type{ASCIIString}))
precompile(Base.is_var_assigned,(Expr, Symbol))
precompile(Base.vcat,(Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}...))
precompile(Base.take_ref,((Any...,),))
precompile(Base.lookup_ref,(Base.ProcessGroup, (Any...,)))
precompile(Base.get,(Base.Dict{Any, Any}, (Any...,), Bool))
precompile(Base.ht_keyindex,(Base.Dict{Any, Any}, (Any...,)))
precompile(Base.setindex!,(Base.Dict{Any, Any}, Base.RemoteValue, (Any...,)))
precompile(Base.alloc_request,(Base.IOBuffer, Int32))
precompile(Base._uv_hook_alloc_buf,(Base.TTY, Int32))
precompile(Base.abstract_call_gf,(Function, (Any...,), (Any...,), Expr))
precompile(==,(Type{ASCIIString}, Type{Any}))
precompile(Base.notify_filled,(Base.IOBuffer, Int64, Ptr{Void}, Int32))
precompile(Base._uv_hook_readcb,(Base.TTY, Int64, Ptr{Void}, Int32))
precompile(Base.stop_reading,(Base.TTY,))
precompile(==,((Any...,), Type{Function}))
precompile(Base.isequal,(Type{((Int64, Int64), Any)}, Type{Function}))
precompile(Base.put,(Base.RemoteRef, Any))
precompile(==,(Type{(Any...,)...}, (Any...,)))
precompile(Base.isequal,(Type{(Any...,)...}, Type{(Any...,)}))
precompile(Base.isequal,(Type{((Int64, Int64), (Any...,)...)}, Type{Function}))
precompile(Base.call_on_owner,(Function, Base.RemoteRef, (Any...,), (Any...,)...))
precompile(Base.isequal,(Type{((Int64, Int64), (Any...,))}, Type{Function}))
precompile(Base.put_ref,((Any...,), (Any...,)))
precompile(Base.wait_empty,(Base.RemoteValue,))
precompile(Base.put,(Base.RemoteValue, Any))
precompile(Base.valid_tparam,(Any,))
precompile(Base.Random.randn,(Int64, Int64, Int64...))
precompile(Base.Array,(Type{Float64}, Int64, Int64))
precompile(Base.LibRandom.randmtzig_fill_randn!,(Array{Float64, 2},))
precompile(Base.setindex!,(Array{Any, 1}, Char, Int64))
precompile(Base.isbits,(Type{Float64},))
precompile(Base.setindex!,(Array{Any, 1}, GetfieldNode, Int64))
precompile(Base.LinAlg.lapack_size,(Char, Array{Float64, 2}))
precompile(Base.fill!,(Array{Float64, 2}, Float64))
precompile(Base.LinAlg.matmul2x2,(Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}))
precompile(Base.LinAlg.matmul3x3,(Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}))
precompile(Base.stride,(Array{Float64, 2}, Int64))
precompile(Base.minimum,(Base.Range1{Int64},))
precompile(Base.maximum,(Base.Range1{Int64},))
precompile(Base.checkbounds,(Int64, Base.Range1{Int64}))
precompile(Base.checkbounds,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.copy_transpose!,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}, Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.unsafe_copy!,(Ptr{Float64}, Ptr{Float64}, Int64))
precompile(Base.unsafe_copy!,(Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64))
precompile(Base.copy!,(Array{Float64, 2}, Int64, Array{Float64, 2}, Int64, Int64))
precompile(Base.copy!,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}, Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.LinAlg.copy_transpose!,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}, Char, Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.LinAlg.copy!,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}, Char, Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.LinAlg.generic_matmatmul,(Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}))
precompile(Base.LinAlg.BLAS.gemm!,(Char, Char, Float64, Array{Float64, 2}, Array{Float64, 2}, Float64, Array{Float64, 2}))
precompile(Base.LinAlg.gemm_wrapper,(Array{Float64, 2}, Char, Char, Array{Float64, 2}, Array{Float64, 2}))
precompile(Base.LinAlg.gemm_wrapper,(Char, Char, Array{Float64, 2}, Array{Float64, 2}))
precompile(==,(Type{ASCIIString}, Type{UTF8String}))
precompile(==,(Type{ASCIIString}, Type{ASCIIString}))
precompile(==,(Type{ASCIIString}, Type{Integer}))
precompile(Base.StateUpdate,(Symbol, TypeVar, Base.ObjectIdDict))
precompile(Base.isbits,(Type{Uint8},))
precompile(==,(Type{Base.RepString}, Type{UTF8String}))
precompile(==,(Type{Base.RepString}, Type{ASCIIString}))
precompile(Base.get,(Base.ObjectIdDict, Any, Any))
precompile(Base.abstract_interpret,(Core.NewvarNode, Base.ObjectIdDict, Base.StaticVarInfo))
precompile(Base.setindex!,(Array{Any, 1}, Core.NewvarNode, Int64))
precompile(Base.Multimedia.display,(Array{Float64, 2},))
precompile(Base.Multimedia.display,(Base.Multimedia.TextDisplay, Array{Float64, 2}))
precompile(Base.Multimedia.MIME,())
precompile(Base.Multimedia.display,(Base.Multimedia.TextDisplay, MIME"text/plain", Array{Float64, 2}))
precompile(Base.showlimited,(Base.TTY, Array{Float64, 2}))
precompile(Base.writemime,(Base.TTY, MIME"text/plain", Array{Float64, 2}))
precompile(Base.show,(Base.TTY, Array{Float64, 2}))
precompile(Base.parseint,(Type{Int32}, ASCIIString, Int64))
precompile(Base.dims2string,((Any...,),))
precompile(Base.print,(Base.TTY, ASCIIString, Char, Char...))
precompile(Base.write,(Base.TTY, Ptr{Uint8}, Int64))
precompile(Base.Grisu._show,(Base.TTY, Float64, Int32, Int64, Bool, ASCIIString, ASCIIString))
precompile(Base.sprint,(Int64, Function, (Any...,), Any...))
precompile(Base.show,(Base.IOBuffer, DataType))
precompile(Base.show_delim_array,(Base.IOBuffer, (Any...,), Char, Char, Char, Bool))
precompile(Base.alignment,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range1{Int64}, Int64, Int64, Int64))
precompile(Base.getindex,(Base.Range1{Int64}, Int64))
precompile(Base.print_matrix_row,(Base.TTY, Array{Float64, 2}, Array{Any, 1}, Int64, Base.Range1{Int64}, ASCIIString))
precompile(Base.reverse,(Array{Any, 1},))
precompile(Base.alignment,(Array{Float64, 2}, Base.Range1{Int64}, Base.Range{Int64}, Int64, Int64, Int64))
precompile(Base.vcat,(Base.Range1{Int64}, Base.Range1{Int64}))
precompile(Base.alignment,(Array{Float64, 2}, Array{Int64, 1}, Base.Range1{Int64}, Int64, Int64, Int64))
precompile(Base.print_matrix_vdots,(Base.TTY, UTF8String, Array{Any, 1}, ASCIIString, Int64, Int64))
precompile(Base.alignment,(Array{Float64, 2}, Array{Int64, 1}, Base.Range{Int64}, Int64, Int64, Int64))
precompile(Base.print,(Base.TTY, UTF8String))
precompile(Base.print_matrix,(Base.TTY, Array{Float64, 2}, Int64, Int32, ASCIIString, ASCIIString, ASCIIString, UTF8String, UTF8String, UTF8String, Int64, Int64))
precompile(Base.print_matrix,(Base.TTY, Array{Float64, 2}, Int64, Int32))
precompile(Base.Grisu._show,(Base.IOBuffer, Float64, Int32, Int64, Bool, ASCIIString, ASCIIString))
precompile(Base.Grisu.showcompact,(Base.IOBuffer, Float64))
precompile(Base.length,(Base.SubString{UTF8String},))
precompile(Base.sum,((Int64, Int64),))
precompile(Base.print,(Base.TTY, ASCIIString, ASCIIString, ASCIIString...))
precompile(Base.del_client,(Base.ProcessGroup, (Any...,), Int64))
precompile(Base.send_del_client,(Base.RemoteRef,))
precompile(Base._delete!,(Base.Dict{Any, Any}, Int64))
precompile(Base.delete!,(Base.Dict{Any, Any}, (Any...,)))
precompile(Base.delete!,(Base.Dict{Any, Any}, Base.RemoteRef))
precompile(Base.weak_key_delete!,(Base.Dict{Any, Any}, Base.RemoteRef))
