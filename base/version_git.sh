# This file collects git info and create a julia file with the GIT_VERSION_INFO struct

echo "# This file was autogenerated in base/version_git.sh"
echo "immutable GitVersionInfo\n\
    commit::String\n\
    commit_short::String\n\
    branch::String\n\
    build_number::Int\n\
    date_string::String\n\
    tagged_commit::Bool\n\
    fork_master_distance::Int\n\
    fork_master_timestamp::Float64\n\
end\n"

# If git is availible
if ( git status 1>/dev/null 2>/dev/null); then
    # Collect tempoarty variables
    origin=$(git config -l 2>/dev/null | grep 'remote\.\w*\.url.*JuliaLang/julia.git' | sed -n 's/remote\.\([a-zA-Z]*\)\..*/\1\//p')
    last_tag=$(git describe --tags --abbrev=0)
    git_time=$(git log -1 --pretty=format:%ct)

    #collect the contents
    commit=$(git rev-parse HEAD)
    commit_short=$(git rev-parse --short HEAD)
    if [ -n "$(git status --porcelain)" ]; then
        # append dirty mark '*' if the repository has uncommited changes
        commit_short="$commit_short"*
    fi
    branch=$(git branch | sed -n '/\* /s///p')
    build_number=$(git rev-list --count HEAD ^$last_tag)

    date_string=$git_time
    if [ "$(uname)" = "Darwin" ] || [ "$(uname)" = "FreeBSD" ]; then
        date_string="$(/bin/date -jr $git_time -u '+%Y-%m-%d %H:%M %Z')"
    else
        date_string="$(/bin/date --date="@$git_time" -u '+%Y-%m-%d %H:%M %Z')"
    fi
    if [ $(git describe --tags --exact-match 2> /dev/null) ]; then
        tagged_commit="true"
    else
        tagged_commit="false"
    fi
    fork_master_distance=$(git rev-list --count HEAD ^"$(echo $origin)master")
    fork_master_timestamp=$(git show -s $(git merge-base HEAD $(echo $origin)master) --format=format:"%ct")

    echo "const GIT_VERSION_INFO = GitVersionInfo("
    echo "    \"$commit\","
    echo "    \"$commit_short\","
    echo "    \"$branch\","
    echo "    $build_number,"
    echo "    \"$date_string\","
    echo "    $tagged_commit,"
    echo "    $fork_master_distance,"
    echo "    $fork_master_timestamp."
    echo ")"
else
    # Default output if git is not availible.
    echo "const GIT_VERSION_INFO = GitVersionInfo(\"\",\"\",\"\",0,\"\",true,0,0)"
fi