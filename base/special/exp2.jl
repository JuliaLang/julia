# Copyright (c) 2005 David Schultz <das@FreeBSD.ORG>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

const exp2f_table = [0.7071067811865476,
0.7384130729697497,
0.7711054127039704,
0.8052451659746271,
0.8408964152537145,
0.8781260801866497,
0.9170040432046712,
0.9576032806985737,
1.0,
1.0442737824274138,
1.0905077326652577,
1.1387886347566916,
1.189207115002721,
1.241857812073484,
1.2968395546510096,
1.3542555469368927]

#	exp2(z + eps)		eps	*/
const exp2_combined_table = [0.707106781186592,   9.070522111187529e-14,
0.7090239421602083,  1.3322676295501878e-15,
0.7109463010845614, -4.346523141407488e-14,
0.7128738720527606,  2.731148640577885e-14,
0.7148066691959843, -1.3322676295501878e-15,
0.7167447066838942, -3.885780586188048e-16,
0.718687998724463,  -5.6565863104651726e-14,
0.7206365595642875, -5.0681681074138396e-14,
0.7225904034885321,  1.7541523789077473e-14,
0.7245495448209743, -8.593126210598712e-14,
0.7265139979245225, -7.438494264988549e-15,
0.7284837772007502,  5.601075159233915e-14,
0.730458897090328,   8.826273045769994e-15,
0.7324393720731814, -4.2299497238218464e-14,
0.7344252166684901, -1.609823385706477e-15,
0.7364164454346849,  2.1094237467877974e-15,
0.738413072969748,  -3.219646771412954e-15,
0.7404151139112507,  2.886579864025407e-14,
0.7424225829363763,  1.1102230246251565e-16,
0.7444354947621779, -4.007905118896815e-14,
0.7464538641456281, -8.382183835919932e-15,
0.748477705883599,  -3.6137759451548845e-14,
0.7505070348132479,  6.750155989720952e-14,
0.7525418658117105,  1.3766765505351941e-14,
0.7545822137966949, -3.1530333899354446e-14,
0.756628093726329,   4.5852210917018965e-14,
0.7586795205991935,  1.638689184346731e-13,
0.7607365094544245,  3.26405569239796e-14,
0.7627990753722339, -6.666889262874065e-14,
0.7648672334736256, -3.375077994860476e-14,
0.766940998920453,  -4.707345624410664e-14,
0.7690203869158267, -3.219646771412954e-15,
0.7711054127040068,  6.80566714095221e-14,
0.773196091570582,   1.3289369604763124e-13,
0.7752924388424706, -5.473399511402022e-14,
0.7773944698885287, -2.8976820942716586e-14,
0.7795022001189417,  4.29101199017623e-14,
0.781615644985665,  -2.5479618415147343e-14,
0.7837348199827712, -9.71445146547012e-15,
0.7858597406461733,  4.718447854656915e-15,
0.7879904225539545,  2.0539125955565396e-14,
0.7901268813264062, -1.1102230246251565e-14,
0.7922691326262677,  3.802513859341161e-14,
0.7944171921585373, -8.104628079763643e-14,
0.7965710756711293, -7.549516567451064e-15,
0.7987307989543421,  5.1514348342607263e-14,
0.8008963778412981, -8.754108549169359e-14,
0.8030678282084277,  7.588374373312945e-14,
0.8052451659746497,  4.035660694512444e-14,
0.8074284071024286, -3.1086244689504383e-15,
0.8096175675974437,  2.1149748619109232e-14,
0.8118126635086755,  1.9761969838327786e-14,
0.8140137109286713, -4.6629367034256575e-15,
0.816220725993644,   1.149080830487037e-14,
0.8184337248835093,  4.7684078907650473e-14,
0.8206527238219895, -2.3925306180672123e-14,
0.8228777390769894,  1.2156942119645464e-14,
0.8251087869603587,  8.715250743307479e-14,
0.8273458838281059,  1.5210055437364645e-14,
0.8295890460808139,  1.0103029524088925e-14,
0.8318382901633419, -4.568567746332519e-14,
0.8340936325653194,  4.873879078104437e-14,
0.8363550898207991,  1.3877787807814457e-15,
0.8386226785089406,  2.220446049250313e-15,
0.840896415253685,  -5.0737192225369654e-14,
0.8431763167242082,  1.9817480989559044e-14,
0.8454623996346857,  5.6538107529036097e-14,
0.847754680744676,   1.637578961322106e-14,
0.8500531768593843,  2.080280392391387e-13,
0.8523579048289748, -8.604228440844963e-14,
0.8546688815502315,  8.326672684688674e-17,
0.8569861239649701,  1.1907141939104804e-14,
0.85930964906124,    1.6930901125533637e-15,
0.8616394738731314, -9.2148511043888e-15,
0.863975615480911,  -1.3072876114961218e-14,
0.8663180910111634,  1.3128387266192476e-14,
0.8686669176368581,  8.271161533457416e-15,
0.8710221125775613, -2.7949864644938316e-14,
0.8733836930995755, -1.4765966227514582e-14,
0.8757516765159298, -1.532107773982716e-14,
0.8781260801866573,  1.2378986724570495e-14,
0.8805069215187851, -1.1213252548714081e-14,
0.882894217966628,  -1.3683498778505054e-14,
0.8852879870318328,  9.02333763264096e-14,
0.8876882462632464, -2.3148150063434514e-14,
0.8900950132574994, -3.449185381754205e-13,
0.892508305659453,  -2.3342439092743916e-14,
0.894928141160701,   7.494005416219807e-16,
0.8973545375015584,  7.66053886991358e-15,
0.8997875124702698,  3.58046925441613e-15,
0.9022270839033146,  4.3021142204224816e-15,
0.9046732696855097, -1.0019762797242038e-14,
0.9071260877502065,  1.1379786002407855e-14,
0.909585556079292,  -1.942890293094024e-14,
0.912051692703543,   2.5895952049381776e-14,
0.9145245157024536,  7.827072323607354e-15,
0.9170040432046723,  1.7208456881689926e-15,
0.9194902933879413, -8.715250743307479e-15,
0.9219832844793048, -1.2809198146612744e-14,
0.9244830347552284,  4.6074255521944e-15,
0.9269895625416973,  7.008282842946301e-15,
0.929502886214412,   2.831068712794149e-15,
0.9320230241988915, -4.690692279041286e-15,
0.9345499949706023, -2.6145752229922437e-14,
0.9370838170551372, -1.9609314172441827e-14,
0.939624509028288,   1.211530875622202e-14,
0.9421720895162452,  1.1940448629843559e-13,
0.9447265771954778,  1.2614909117303341e-14,
0.9472879907934755, -1.1185496973098452e-14,
0.9498563490882761, -2.3314683517128287e-15,
0.9524316709088301, -1.0644263248593688e-14,
0.955013975135192,  -4.315992008230296e-15,
0.9576032806985753,  2.4216739724636227e-15,
0.9601996065815368,  1.963013085415355e-14,
0.9628029718180656,  4.73232564246473e-15,
0.965413395493814,   6.175615574477433e-16,
0.968030896746145,  -3.3861802251067274e-15,
0.9706554947643162, -5.891120924417237e-15,
0.9732872087895824, -5.0737192225369654e-14,
0.9759260581154893,  1.8041124150158794e-16,
0.978572062087697,  -4.649058915617843e-15,
0.9812252401044642,  7.355227538141662e-16,
0.9838856116165919,  5.936223734792634e-15,
0.9865531961276164, -1.1310397063368782e-15,
0.9892280131939672, -1.2011225347663412e-14,
0.9919100824251094, -4.683753385137379e-16,
0.9945994234836228, -1.4982806662011683e-14,
0.9972960560854724,  3.359725692098081e-15,
1.0,                 0.0,
1.0027112750502023, -2.671474153004283e-16,
1.0054299011127916, -1.6067008834497187e-14,
1.0081558981184178,  3.642919299551295e-16,
1.010889286051703,   3.507610868425104e-15,
1.013630084951489,  -6.453171330633722e-16,
1.016378314910954,   1.3426759704060487e-15,
1.0191339960777215, -2.3311214070176334e-14,
1.0218971486541109, -8.222589276130066e-15,
1.0246677928971384,  3.858025010572419e-15,
1.027445949118777,   1.877664690397296e-14,
1.030231637686039,  -2.8449465006019636e-15,
1.0330248790212302,  2.4702462297909733e-15,
1.0358256936019519, -7.313594174718219e-15,
1.0386341019613787, -8.326672684688674e-17,
1.0414501246883212,  7.022160630754115e-15,
1.0442737824274095, -5.946632075648495e-15,
1.047105095879291,   1.429412144204889e-15,
1.049944085800694,   9.381384558082573e-15,
1.052790773004622,  -5.953570969552402e-15,
1.0556451783605751,  2.4577562207639403e-14,
1.0585073227945059, -9.284240043427872e-15,
1.0613772272892525, -1.2961853812498703e-14,
1.0642549128844674,  3.8441472227646045e-15,
1.067140400676826,   3.1086244689504383e-15,
1.0700337118202567,  2.0192181260370035e-14,
1.0729348675259776,  2.6922908347160046e-15,
1.0758438890627808, -1.3683498778505054e-14,
1.0787607977571219,  2.761679773755077e-15,
1.0816856149932175,  3.0253577421035516e-15,
1.0846183622133163,  9.409140133698202e-15,
1.087559060917776,   8.534839501805891e-15,
1.090507732665291,   4.4103609653234344e-14,
1.0934643990728785, -9.686695889854491e-15,
1.0964290818163576, -2.5340840537069198e-14,
1.0994018026302341,  1.5931700403370996e-14,
1.102382583307852,   1.4460654895742664e-14,
1.1053714457016148, -1.650068970349139e-13,
1.1083684117237071,  3.710920459809586e-14,
1.1113735033448087, -1.1601830607332886e-14,
1.1143867425958942,  2.1649348980190553e-15,
1.1174081515673715,  2.9698465908722937e-15,
1.1204377524096127,  7.799316747991725e-15,
1.1234755673330008, -2.4397150966137815e-14,
1.126521618608283,   5.2541304640385533e-14,
1.1295759285662892,  1.3322676295501878e-15,
1.1326385195987572,  4.832245714680994e-14,
1.1357094141578237,  2.3064883336587627e-14,
1.1387886347566736, -2.2898349882893854e-14,
1.141876203969568,   8.076872504148014e-15,
1.1449721444317906, -1.712519015484304e-14,
1.148076478840192,   1.637578961322106e-14,
1.1511892299529953,  1.582067810090848e-14,
1.154310420590267,   6.369904603786836e-14,
1.1574400736337362, -1.84297022087776e-14,
1.1605782120274846, -1.762479051592436e-14,
1.1637248587775864,  1.0963452368173421e-14,
1.166880036952455,  -3.2834845953289005e-14,
1.170043769683288,   4.654610030740969e-14,
1.1732160801636253, -1.4654943925052066e-14,
1.1763969916502701, -1.3683498778505054e-14,
1.1795865274628723, -4.468647674116255e-15,
1.182784710984311,  -3.658184866139891e-14,
1.1859915656609776, -1.970645868709653e-14,
1.1892071150026677, -6.4698246760031e-14,
1.1924313825823585, -9.591216709736727e-13,
1.1956643920398005, -3.247402347028583e-14,
1.1989061670743486, -3.835820550079916e-14,
1.202156731452726,   2.736699755701011e-14,
1.2054161090051225, -1.5543122344752192e-15,
1.2086843236265314, -5.984102102729594e-14,
1.2119613992768292,  3.3362201889985954e-14,
1.2152473599804934,  2.90878432451791e-14,
1.2185422298273916, -1.9872992140790302e-14,
1.2218460329727474, -1.1934897514720433e-14,
1.225158793637022,  -1.4527268277220173e-13,
1.2284805361068791,  1.071365218763276e-14,
1.2318112847341685,  1.0835776720341528e-13,
1.2351510639369363,  3.497202527569243e-15,
1.2384998981997986, -2.098321516541546e-14,
1.241857812073518,   3.941291737419306e-14,
1.2452248301751068, -1.7513768213461844e-13,
1.248600977189116,  -1.0252909632413321e-13,
1.2519862778663498,  3.858025010572419e-14,
1.2553807570247149,  2.731148640577885e-14,
1.2587844395497014, -1.7208456881689926e-14,
1.2621973503942812,  3.480549182199866e-14,
1.2656195145788114,  5.773159728050814e-15,
1.2690509571917288, -5.051514762044462e-15,
1.2724917033893919, -1.2323475573339238e-14,
1.2759417783963776, -1.6431300764452317e-14,
1.2794012075057224,  5.995204332975845e-14,
1.282870016078732,  -5.1958437552457326e-14,
1.2863482295460367,  1.2490009027033011e-14,
1.2898358734066417, -2.6922908347160046e-14,
1.2933329732290988,  1.0436096431476471e-14,
1.296839554650994,  -1.7319479184152442e-14,
1.3003556433796573,  7.327471962526033e-15,
1.3038812651919816,  5.051514762044462e-14,
1.307416445934654,  -2.5646151868841116e-14,
1.3109612115247846,  2.2315482794965646e-14,
1.3145155879493446, -1.099120794378905e-14,
1.3180796012660587, -5.773159728050814e-15,
1.321653277603327,   1.8496315590255108e-13,
1.325236643159704,  -4.057865155004947e-14,
1.3288297242058946, -6.48925357893404e-14,
1.3324325470833205,  1.7219559111936178e-13,
1.3360451382041798,  3.674838211509268e-14,
1.3396675240534175,  1.2329026688462363e-13,
1.3432997311867925, -4.596323321948148e-14,
1.3469417862329143, -3.3806291099836017e-14,
1.3505937158922334,  2.1260770921571748e-13,
1.3542555469368922, -5.551115123125783e-16,
1.3579273062129547,  5.695444116327053e-14,
1.3616090206381866, -4.0467629247586956e-14,
1.3653007172041638,  1.605937605120289e-13,
1.3690024229745676, -2.4202861936828413e-14,
1.3727141650876882,  2.0816681711721685e-14,
1.376435970754569,   4.08006961549745e-14,
1.3801678672602453,  7.549516567451064e-15,
1.3839098819638134, -1.9373391779708982e-14,
1.387662042298513,  -1.6708856520608606e-14,
1.3914243757719233, -2.942091015256665e-15,
1.3951969099661583, -4.3298697960381105e-14,
1.3989796725393029,  1.0227374502846942e-12,
1.4027726912201248, -8.215650382226158e-14,
1.4065759938190179,  2.4980018054066022e-15,
1.4103896082172265, -4.524158825347513e-14]

# exp2(x::Float64): compute the base 2 exponential of x
# Accuracy: Peak error < 0.503 ulp for normalized results.
#
# Method: (accurate tables)
#
#   Reduce x:
#     x = 2^k + y, for integer k and |y| <= 1/2.
#     Thus we have exp2(x) = 2^k * exp2(y).
#
#   Reduce y:
#     y = i/TABLESIZE + z - eps[i] for integer i near y * TABLESIZE.
#     Thus we have exp2(y) = exp2(i/TABLESIZE) * exp2(z - eps[i]),
#     with |z - eps[i]| <= 2^-9 + 2^-39 for the table used.
#
#   We compute exp2(i/TABLESIZE) via table lookup and exp2(z - eps[i]) via
#   a degree-5 minimax polynomial with maximum error under 1.3 * 2^-61.
#   The values in exp2t[] and eps[] are chosen such that
#   exp2t[i] = exp2(i/TABLESIZE + eps[i]), and eps[i] is a small offset such
#   that exp2[i] is accurate to 2^-64.
#
#   Note that the range of i is +-TABLESIZE/2, so we actually index the tables
#   by i0 = i + TABLESIZE/2.  For cache efficiency, exp2t[] and eps[] are
#   virtual tables, interleaved in the real table exp2_combined_table[].
#
#   This method is due to Gal, with many details due to Gal and Bachelis:
#
#	Gal, S. and Bachelis, B.  An Accurate Elementary Mathematical Library
#	for the IEEE Floating Point Standard.  TOMS 17(1), 26-46 (1991).

# exp2(x::Float32): compute the base 2 exponential of x
#
# Accuracy: Peak error < 0.501 ulp; location of peak: -0.030110927.
#
# Method: (equally-spaced tables)
#
#   Reduce x:
#     x = 2^k + y, for integer k and |y| <= 1/2.
#     Thus we have exp2f(x) = 2^k * exp2(y).
#
#   Reduce y:
#     y = i/TABLESIZE + z for integer i near y * TABLESIZE.
#     Thus we have exp2(y) = exp2(i/TABLESIZE) * exp2(z),
#     with |z| <= 2^-(TABLESIZE+1).
#
#   We compute exp2(i/TABLESIZE) via table lookup and exp2(z) via a
#   degree-4 minimax polynomial with maximum error under 1.4 * 2^-33.
#   Using double precision for everything except the reduction makes
#   roundoff error insignificant and simplifies the scaling step.
#
#   This method is due to Tang, but I do not use his suggested parameters:
#
#	Tang, P.  Table-driven Implementation of the Exponential Function
#	in IEEE Floating-Point Arithmetic.  TOMS 15(2), 144-157 (1989).

exp2_tablebits(::Type{Float32}) = 0x00000004
exp2_tablesize(::Type{Float32}) = 0x00000010

exp2_tablebits(::Type{Float64}) = 0x00000008
exp2_tablesize(::Type{Float64}) = 0x00000100

exp2_overflow(::Type{Float64}) = 1024.0
exp2_overflow(::Type{Float32}) = 128f0
exp2_underflow(::Type{Float64}) = -1075.0
exp2_underflow(::Type{Float32}) = -150f0
exp2_small(::Type{Float64}) = 5.551115123125783e-17 # 2.0^-54
exp2_small(::Type{Float32}) = 5.9604645f-8 # 2f0^-24
@inline exp2_word(x::Float64) = reinterpret(UInt64, x) % UInt32 # low word
@inline exp2_word(x::Float32) = reinterpret(UInt32, x) # word

@inline exp2_redux(T::Type{Float64}) = 2.6388279066624e13 # 3*2.0^51 / exp2_tablesize(T)
@inline exp2_redux(T::Type{Float32}) = 786432.0f0 # 3*2f0^22 / exp2_tablesize(T)

function exp2(x::T) where T<:Union{Float32, Float64}
    absx = abs(x)

    # Filter out exceptional cases
    isinf(x) && return ifelse(signbit(x), T(0), x)
    isnan(x) && return x
    if absx >= exp2_overflow(T)
        x >= exp2_overflow(T) && return T(Inf) # overflow  without signal
        x <= exp2_underflow(T) && return zero(T) # underflow without signal
    elseif absx < exp2_small(T)
        return one(T) + x
    end

    # Reduce x, computing z, i0, and k.
    t = x + exp2_redux(T)
    i0 = exp2_word(t)
    if T == Float32
        # i0 += exp2_tablesize(T) >> 1
        i0 += 0x00000008
        # k = ((i0 >> exp2_tablebits(T)) << 20) % Int32
        k = ((i0 >> 0x00000004) << 20) % Int32
        i0 &= 0x0000000f
    else
        # i0 += exp2_tablesize(T) >> 1
        i0 += 0x00000080
        # k = ((i0 >> exp2_tablebits(T)) << 20) % Int32
        k = ((i0 >> 0x00000008) << 20) % Int32
        i0 &= 0x000000ff
        i0 = i0 << 1
    end
    i0 += 0x00000001 # reference index is 1 not 0
    t -= exp2_redux(T)
    z = x - t

    # Compute r = exp2(y) and scale by 2^(k>>20)
    # based on x being Float32 or Float64
    exp2_kernel(k, i0, z, x)
end

@inline function exp2_kernel(k, i0, z, x::Float64)
    # Compute r = exp2(y) = exp2t[i0] * p(z - eps[i]).
    @inbounds t = exp2_combined_table[i0]	# exp2t[i0]
    @inbounds z -= exp2_combined_table[i0 + 1] # eps[i0]

    r = t + t * z * @horner(z, 0.6931471805599453,
                               0.2402265069591,
                               0.0555041086648214,
                               0.009618129842126066,
                               0.0013333559164630223)

    # Scale by 2^(k>>20).
    if k >= -(1021 << 20)
        if k == 1024 << 20
            return r * 2.0 * 8.98846567431158e307 # r * 2.0 * 2.0^1023 (avoids the pow call)
        end
        return r * reinterpret(Float64, (UInt64(0x3ff00000 + k) <<32 ) | 0)
    else
        return r * reinterpret(Float64, (UInt64(0x3ff00000 + k + (1000 << 20)) << 32) | 0) * 9.332636185032189e-302 # r * twopkp1000 * 2.0^-1000
    end
end

@inline function exp2_kernel(k, i0, z, x::Float32)::Float32

   #Compute r = exp2(y) = exp2ft[i0] * p(z)
    @inbounds tv = exp2f_table[i0]
    u = tv * z
    tv = tv + u * @horner(z, 0.6931472f0, 0.2402265f0) +
    u * (z * z) * @horner(z, 0.05550541f0, 0.009618355f0)

   # Scale by 2^(k>>20)
   reinterpret(Float64, (UInt64((0x3ff00000 + k)) <<32 ) | 0)
   return tv * reinterpret(Float64, (UInt64((0x3ff00000 + k)) <<32 ) | 0)
end

exp2(x::Real) = exp2(float(x))