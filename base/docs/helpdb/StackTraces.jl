# This file is a part of Julia. License is MIT: http://julialang.org/license


# Base

"""
    stacktrace([trace::Vector{Ptr{Void}},] [c_funcs::Bool=false]) -> StackTraces.StackTrace

Returns a stack trace in the form of a vector of `StackFrame`s. (By default stacktrace
doesn't return C functions, but this can be enabled.) When called without specifying a
trace, `stacktrace` first calls `backtrace`.
"""
stacktrace

"""
    catch_stacktrace([c_funcs::Bool=false]) -> StackTraces.StackTrace

Returns the stack trace for the most recent error thrown, rather than the current execution
context.
"""
catch_stacktrace

"""
    show_stacktrace([io::IO,] [stack::StackTrace]; full_path::Bool=false)

An analogue of `Base.show_backtrace` that prints the stacktrace to the specified IO stream.
Only the base name of the `file` and `inlined_file` fields are displayed unless the optional
`full_path` keyword argument is set to `true`.
"""
show_stacktrace

"""
    format_stackframe(frame::StackFrame; full_path::Bool=false) -> str

Returns a string representation of a `StackFrame` for display purposes. Only the base name
of the `file` and `inlined_file` fields are displayed unless the optional `full_path`
keyword argument is set to `true`.
"""
format_stackframe

"""
    format_stacktrace(stack::StackTrace, separator::AbstractString, [start::AbstractString="", finish::AbstractString=""]; full_path::Bool=false) -> str

Returns a string representation of a `StackTrace` for display purposes. Only the base name
of the `file` and `inlined_file` fields are displayed unless the optional `full_path`
keyword argument is set to `true`.
"""
format_stacktrace

# Base.StackTraces

"""
    StackFrame

Stack information representing execution context, with the following fields:

`func::Symbol`
    the name of the function containing the execution context

`file::Symbol`
    the path to the file containing the execution context

`line::Int`
    the line number in the file containing the execution context

`inlined_file::Symbol`
    the path to the file containing the context for inlined code

`inlined_line::Int`
    the line number in the file containing the context for inlined code

`from_c::Bool`
    true if the code is from C

`pointer::Int64`
    representation of the pointer to the execution context as returned by `backtrace`
"""
StackTraces.StackFrame

"""
    StackTrace

An alias for `Vector{StackFrame}` provided for convenience; returned by calls to
`stacktrace` and `catch_stacktrace`.
"""
StackTraces.StackTrace

"""
    lookup(pointer::Union{Ptr{Void}, UInt}) -> StackTraces.StackFrame

Given a pointer to an execution context (usually generated by a call to `backtrace`), looks
up stack frame context information.
"""
StackTraces.lookup

"""
    remove_frames!(stack::StackTrace, name::Symbol)

Takes a `StackTrace` (a vector of `StackFrames`) and a function name (a `Symbol`) and
removes the `StackFrame` specified by the function name from the `StackTrace` (also removing
all frames above the specified function). Primarily used to remove `StackTraces` functions
from the `StackTrace` prior to returning it.
"""
StackTraces.remove_frames!
