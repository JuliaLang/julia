precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Pair{String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.UUID}, Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.UUID}, Base.ValueIterator{Base.Dict{String, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.UUID}, Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.close), Array{LibGit2.GitAnnotated, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.table2dict), Array{Any, 1}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOStream, Base.Pair{Symbol, Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.UUID, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.UUID, Pkg.Types.VersionSpec})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.VersionNumber, Base.SHA1})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.UUID})
precompile(Tuple{Type{Base.SHA1}, Base.SubString{String}})
precompile(Tuple{Type{Base.SHA1}, String})
precompile(Tuple{Type{LibGit2.CheckoutOptions}, Int64, UInt32, Int32, UInt32, UInt32, Int32, UInt32, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, LibGit2.StrArrayStruct, Ptr{Nothing}, Ptr{Nothing}, Base.Cstring, Base.Cstring, Base.Cstring, Base.Cstring, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{Type{LibGit2.GitCommit}, LibGit2.GitRepo, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:callbacks,), Tuple{LibGit2.RemoteCallbacks}}}, Tuple{LibGit2.RemoteCallbacks}})
precompile(Tuple{Type{NamedTuple{(:env,), Tuple{Pkg.Types.EnvCache}}}, Tuple{Pkg.Types.EnvCache}})
precompile(Tuple{Type{NamedTuple{(:header, :color), Tuple{String, Symbol}}}, Tuple{String, Symbol}})
precompile(Tuple{Type{NamedTuple{(:msg, :options), Tuple{String, LibGit2.FetchOptions}}}, Tuple{String, LibGit2.FetchOptions}})
precompile(Tuple{Type{NamedTuple{(:transfer_progress, :credentials), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.UUID, String, Nothing, Pkg.Display.VerInfo})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.UUID, String, Pkg.Display.VerInfo, Nothing})
precompile(Tuple{Type{Pkg.Display.DiffEntry}, Base.UUID, String, Pkg.Display.VerInfo, Pkg.Display.VerInfo})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Base.SHA1, Nothing, Base.VersionNumber, Bool, Nothing})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Base.SHA1, Nothing, Base.VersionNumber, Bool, Pkg.Types.GitRepo})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Nothing, Nothing, Nothing, Bool, Nothing})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Nothing, String, Base.VersionNumber, Bool, Nothing})
precompile(Tuple{Type{Pkg.Pkg2.Reqs.Comment}, String})
precompile(Tuple{Type{Pkg.Pkg2.Reqs.Requirement}, String})
precompile(Tuple{Type{Pkg.Types.GitRepo}, String, String})
precompile(Tuple{Type{Pkg.Types.PackageSpec}, Base.SubString{String}, Base.UUID, Pkg.Types.VersionSpec, Pkg.Types.PackageMode, Nothing, Pkg.Types.PackageSpecialAction, Nothing})
precompile(Tuple{Type{Pkg.Types.PackageSpec}, String, Base.UUID, Base.VersionNumber})
precompile(Tuple{Type{Pkg.Types.PackageSpec}, String})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Base.SubString{String}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Int64, Int64, Int64})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{UInt32, UInt32, UInt32}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, UInt32, UInt32, UInt32})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, String})
precompile(Tuple{Type{Ref{T} where T}, LibGit2.GitHash})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOStream, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{typeof(Base.Unicode.lowercase)}}, typeof(Base.sort!), Array{String, 1}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:callbacks,), Tuple{LibGit2.RemoteCallbacks}}, Type{LibGit2.FetchOptions}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:env,), Tuple{Pkg.Types.EnvCache}}, Type{Pkg.Types.Context}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:header, :color), Tuple{String, Symbol}}, Type{Pkg.GitTools.MiniProgressBar}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:payload, :transfer_progress, :credentials), Tuple{Base.Dict{Symbol, Any}, Ptr{Nothing}, Ptr{Nothing}}}, Type{LibGit2.RemoteCallbacks}})
precompile(Tuple{getfield(LibGit2, Symbol("#kw##fetch")), NamedTuple{(:msg, :options), Tuple{String, LibGit2.FetchOptions}}, typeof(LibGit2.fetch), LibGit2.GitRemote, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##_print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML._print), Base.IOStream, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##print")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.print), Base.IOStream, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, Array{String, 1}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#kw##printvalue")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.IOStream, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, Nothing})
precompile(Tuple{typeof(Base.:(!=)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.:(-)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Nothing})
precompile(Tuple{typeof(Base.:(==)), Base.SHA1, Nothing})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.:(==)), LibGit2.GitCommit, Nothing})
precompile(Tuple{typeof(Base.:(==)), Nothing, Base.UUID})
precompile(Tuple{typeof(Base.:(==)), Nothing, Nothing})
precompile(Tuple{typeof(Base.:(==)), Pkg.REPLMode.CommandKind, Pkg.REPLMode.CommandKind})
precompile(Tuple{typeof(Base.:(==)), String, Nothing})
precompile(Tuple{typeof(Base.:(|)), Bool, Bool})
precompile(Tuple{typeof(Base.:(âˆ‰)), Base.UUID, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.Filesystem.cd), String})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base._array_for), Type{Array{Base.BitArray{2}, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Base.VersionNumber, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.BitArray{1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.BitArray{2}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Dict{Base.VersionNumber, Int64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.UUID}, Base.ValueIterator{Base.Dict{Any, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{Base.UUID}, Base.ValueIterator{Base.Dict{String, Any}}, Base.HasLength})
precompile(Tuple{typeof(Base._iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.add_sum), Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{String, 1}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.close), Base.Channel{Any}})
precompile(Tuple{typeof(Base.close), LibGit2.GitAnnotated})
precompile(Tuple{typeof(Base.close), LibGit2.GitCommit})
precompile(Tuple{typeof(Base.close), LibGit2.GitConfig})
precompile(Tuple{typeof(Base.close), LibGit2.GitDiff})
precompile(Tuple{typeof(Base.close), LibGit2.GitReference})
precompile(Tuple{typeof(Base.close), LibGit2.GitRemote})
precompile(Tuple{typeof(Base.close), LibGit2.GitRepo})
precompile(Tuple{typeof(Base.close), LibGit2.GitTree})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, Type{Base.UUID}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{String, Any}}, Type{Base.UUID}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, Type{Base.UUID}}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.collect_similar), Array{LibGit2.GitAnnotated, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.UUID, 1}, Base.UUID, Base.Generator{Base.ValueIterator{Base.Dict{Any, Any}}, Type{Base.UUID}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.UUID, 1}, Base.UUID, Base.Generator{Base.ValueIterator{Base.Dict{String, Any}}, Type{Base.UUID}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Array{Base.BitArray{2}, 1}, 1}}, Array{Array{Base.BitArray{2}, 1}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Base.BitArray{1}, 1}}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Base.Dict{Base.VersionNumber, Int64}, 1}}, Array{Base.Dict{Base.VersionNumber, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Base.UUID, Int64}}, Base.Dict{Base.UUID, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Base.UUID, Pkg.GraphType.ResolveLogEntry}}, Base.Dict{Base.UUID, Pkg.GraphType.ResolveLogEntry}})
precompile(Tuple{typeof(Base.convert), Type{Base.UUID}, Base.UUID})
precompile(Tuple{typeof(Base.convert), Type{Float64}, UInt32})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Union{Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.count), Base.BitArray{1}})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.Dict{String, Any}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Base.UUID, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Base.UUID, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{Base.UUID, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.display_error), Base.IOStream, ErrorException, Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.eachmatch), Base.Regex, String})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.empty), Array{Union{Nothing, Base.SubString{String}}, 1}, Type{Base.SubString{String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Base.UUID}, Type{Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Base.UUID}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.find_env), Base.SubString{String}})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.foldl), typeof(Base.union!), Base.Set{Base.UUID}, Tuple{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Base.UUID, Array{String, 1}}, Base.UUID, Array{String, 1}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}}, Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}}, Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Any}, String, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Array{Base.UUID, 1}}, String, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Array{String, 1}}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Base.VersionNumber, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.BitArray{1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.BitArray{2}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.Dict{Int64, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.UUID, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Base.VersionNumber, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{2}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Base.UUID}, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{LibGit2.GitHash}})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.UUID, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.UUID}})
precompile(Tuple{typeof(Base.getindex), Type{Pkg.Types.VersionRange}, Pkg.Pkg2.Pkg2Types.VersionInterval})
precompile(Tuple{typeof(Base.getproperty), Pkg.REPLMode.Command, Symbol})
precompile(Tuple{typeof(Base.getproperty), Pkg.TOML.Table, Symbol})
precompile(Tuple{typeof(Base.getproperty), Pkg.Types.PackageSpec, Symbol})
precompile(Tuple{typeof(Base.hash), Tuple{String, UInt64}, UInt64})
precompile(Tuple{typeof(Base.hash), Tuple{String}, UInt64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{K, V} where V where K}, Base.UUID})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Base.UUID}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.haskey), Pkg.TOML.Table, String})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String, UInt64}, Tuple{String, UInt64}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{String}, Tuple{String}})
precompile(Tuple{typeof(Base.identity), Int64})
precompile(Tuple{typeof(Base.in), Base.UUID, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.in), String, Array{String, 1}})
precompile(Tuple{typeof(Base.in), String, Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{String, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{String, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt32, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt32, Int64}, Int64})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(Base.isempty), Array{Any, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.isopen), Base.Channel{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.UUID, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String}})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.lastindex), Base.BitArray{1}})
precompile(Tuple{typeof(Base.length), Array{Array{Base.BitArray{2}, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Base.VersionNumber, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Dict{Base.VersionNumber, Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Dict{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Base.BitArray{1}})
precompile(Tuple{typeof(Base.length), Base.Dict{Base.UUID, Int64}})
precompile(Tuple{typeof(Base.length), Base.Dict{Base.UUID, Pkg.GraphType.ResolveLogEntry}})
precompile(Tuple{typeof(Base.length), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.length), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.map), Type{Base.UUID}, Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.map), Type{Base.UUID}, Base.ValueIterator{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.map), Type{Base.UUID}, Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.map), typeof(Base.close), Array{LibGit2.GitAnnotated, 1}})
precompile(Tuple{typeof(Base.mapfoldl), typeof(Base.identity), typeof(Base.union!), Base.Set{Base.UUID}, Tuple{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.union!), Base.Set{Base.UUID}, Tuple{Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}}})
precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), typeof(Base.add_sum), Int64})
precompile(Tuple{typeof(Base.mean), Array{Int64, 1}})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}, NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:version, :payload), Tuple{UInt32, Ptr{Nothing}}}}, Type{NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}}, Type{NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.notify_error), Base.Channel{Any}, Base.InvalidStateException})
precompile(Tuple{typeof(Base.println), Base.IOStream})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.promote_eltype), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.push!), Array{Base.SubString{String}, 1}, Base.SubString{String}})
precompile(Tuple{typeof(Base.push!), Array{Base.UUID, 1}, Base.UUID})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Pkg2.Reqs.Line, 1}, Pkg.Pkg2.Reqs.Comment})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Pkg2.Reqs.Line, 1}, Pkg.Pkg2.Reqs.Requirement})
precompile(Tuple{typeof(Base.push!), Array{Tuple{Base.UUID, String}, 1}, Tuple{Base.UUID, String}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{String, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{String}})
precompile(Tuple{typeof(Base.remove_linenums!), Float64})
precompile(Tuple{typeof(Base.remove_linenums!), String})
precompile(Tuple{typeof(Base.run), Base.Cmd})
precompile(Tuple{typeof(Base.setindex!), Base.BitArray{1}, Bool, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.UUID, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.VersionNumber, Base.SHA1}, Base.SHA1, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, Any}, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.UUID, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, LibGit2.CredentialPayload, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Pkg.GitTools.MiniProgressBar, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Base.Iterators.Stateful{Tuple{UInt32, UInt32, UInt32}, Any}, Symbol, Tuple{UInt32, Int64}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GitTools.MiniProgressBar, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GitTools.MiniProgressBar, Symbol, UInt32})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.Graph, Symbol, Array{Array{Base.BitArray{2}, 1}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.Graph, Symbol, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.Graph, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.GraphData, Symbol, Array{Array{Base.VersionNumber, 1}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.GraphData, Symbol, Array{Base.Dict{Base.VersionNumber, Int64}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.GraphData, Symbol, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.GraphData, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.GraphData, Symbol, Base.Dict{Base.UUID, Int64}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GraphType.ResolveLog, Symbol, Base.Dict{Base.UUID, Pkg.GraphType.ResolveLogEntry}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.GitRepo, Symbol, Base.SHA1})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.IOStream}, ErrorException, Array{Ptr{Nothing}, 1}})
precompile(Tuple{typeof(Base.similar), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.skip_deleted_floor!), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.string), LibGit2.GitHash})
precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String, String})
precompile(Tuple{typeof(Base.string), String, Module, String, String, String, Int64})
precompile(Tuple{typeof(Base.trues), Int64})
precompile(Tuple{typeof(Base.unescape_string), Base.SubString{String}})
precompile(Tuple{typeof(Base.union!), Base.Set{Base.UUID}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.union), Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.Fixed}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}, Base.KeySet{Base.UUID, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}}})
precompile(Tuple{typeof(Base.values), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{Type{Base.Pair{String, Union{Nothing, Base.VersionNumber}}}, String, Base.VersionNumber}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{Type{Base.Pair{String, Union{Nothing, Base.VersionNumber}}}, String, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.:(!=)), Pkg.Types.PackageSpec, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.:(+)), Ptr{Union{Ptr{Nothing}, Base.InterpreterIP}}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.:(+)), Ptr{Union{Ptr{Nothing}, Base.InterpreterIP}}, UInt64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.:(==)), Pkg.REPLMode.CommandKind, Pkg.REPLMode.CommandKind}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.:(==)), String, Pkg.REPLMode.CommandKind}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base._similar_for), Array{LibGit2.GitAnnotated, 1}, Type{Int32}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.HasShape{1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base._similar_for), Array{LibGit2.GitAnnotated, 1}, Type{Nothing}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.HasShape{1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.append!), Array{Base.SubString{String}, 1}, Array{Base.SubString{String}, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.append!), Array{Nothing, 1}, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.append!), Array{Union{Nothing, Base.SubString{String}}, 1}, Array{Base.SubString{String}, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.append!), Array{Union{Nothing, Base.SubString{String}}, 1}, Array{Nothing, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.collect_to_with_first!), Array{Int32, 1}, Int32, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.collect_to_with_first!), Array{Int32, 1}, Nothing, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Int32, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.convert), Type{Union{Nothing, Base.AbstractEnv, String}}, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.convert), Type{Union{Nothing, Base.AbstractEnv, String}}, String}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int32}, 1}, Int64, Array{Int32, 1}, Int64, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.copyto!), Array{Union{Nothing, Int32}, 1}, Int64, Array{Nothing, 1}, Int64, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.getproperty), Pkg.REPLMode.Command, Symbol}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.in), Nothing, Array{Pkg.REPLMode.CommandKind, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.in), Pkg.REPLMode.CommandKind, Array{Pkg.REPLMode.CommandKind, 1}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.iterate), Nothing, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.iterate), Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.notify_error), Base.Channel{Any}, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.print), Base.IOContext{Base.IOStream}, Int32}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.print), Base.IOContext{Base.IOStream}, Module}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Base.SubString{String}}, Type{Nothing}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Int32}, Type{Int32}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Int32}, Type{Nothing}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Nothing}, Type{Base.SubString{String}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Nothing}, Type{Int32}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.promote_typejoin), Type{Nothing}, Type{Nothing}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.push!), Array{Union{Nothing, Base.SubString{String}}, 1}, Base.SubString{String}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.push!), Array{Union{Nothing, Base.SubString{String}}, 1}, Nothing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.replace), Nothing, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int32}, 1}, Int32, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int32}, 1}, Nothing, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, Base.VersionNumber}}, Base.VersionNumber, String}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, Base.VersionNumber}}, Nothing, String}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.setproperty!), REPL.LineEdit.Prompt, Symbol, String}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.IOStream}, Char, Array{Any, 1}, String, Char, Int64, Int64, Bool}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.IOStream}, Char, Array{Any, 1}, Symbol, Char, Int64, Int64, Bool}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.show_list), Base.IOContext{Base.IOStream}, Array{Any, 1}, String, Int64, Int64, Bool}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.show_list), Base.IOContext{Base.IOStream}, Array{Any, 1}, Symbol, Int64, Int64, Bool}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.similar), Array{Int32, 1}, Type{Int32}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.similar), Array{Int32, 1}, Type{Union{Nothing, Int32}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.similar), Array{Nothing, 1}, Type{Nothing}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.similar), Array{Nothing, 1}, Type{Union{Nothing, Int32}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.sizehint!), Array{Base.SubString{String}, 1}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.sizehint!), Array{Nothing, 1}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Base.sizehint!), Array{Union{Nothing, Base.SubString{String}}, 1}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Pkg.REPLMode.complete_package), Base.SubString{String}, Int64, Int64, Nothing, Base.Missing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Pkg.REPLMode.complete_package), Base.SubString{String}, Int64, Int64, Nothing, Bool}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Pkg.REPLMode.complete_package), Base.SubString{String}, Int64, Int64, Pkg.REPLMode.CommandKind, Base.Missing}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{Type{T} where T}, Type{Tuple{typeof(Pkg.REPLMode.complete_package), Base.SubString{String}, Int64, Int64, Pkg.REPLMode.CommandKind, Bool}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{QuoteNode, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt32, 1}}})
precompile(Tuple{typeof(Core.Compiler.getindex), Array{Tuple{Nothing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_add_or_develop!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_build!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_free!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_gc!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_generate!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_help!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_init!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_instantiate!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_pin!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_precompile!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_rm!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_status!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_test!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_up!)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.promptf)}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Bool, Symbol}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Nothing, typeof(Base.replace), Nothing}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{QuoteNode, Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Symbol, Symbol, QuoteNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Base.Libc.RawFD, Base.Libc.RawFD, Base.Libc.RawFD}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Tuple{Tuple{Nothing}}, Int64})
precompile(Tuple{typeof(Core.Compiler.getindex), Type{Any}, Core.SSAValue, Char, Core.SSAValue})
precompile(Tuple{typeof(Core.Compiler.getindex), Type{Any}, Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_add_or_develop!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_build!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_free!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_gc!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_generate!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_help!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_init!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_instantiate!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_pin!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_precompile!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_rm!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_status!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_test!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_up!)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.promptf)}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Bool, Symbol}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Nothing, typeof(Base.replace), Nothing}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Symbol, Symbol, QuoteNode}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Tuple{Base.Libc.RawFD, Base.Libc.RawFD, Base.Libc.RawFD}}})
precompile(Tuple{typeof(Core.Compiler.length), Tuple{Tuple{Nothing}}})
precompile(Tuple{typeof(Core.Compiler.vect), Tuple{Nothing, Int64}})
precompile(Tuple{typeof(LibGit2.peel), Type{LibGit2.GitTree}, LibGit2.GitCommit})
precompile(Tuple{typeof(Pkg.Display.filter_manifest), Pkg.Display.InProject{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.in_project), Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.manifest_diff), Pkg.Types.Context, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.name_ver_info), Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.not_in_project), Base.Dict{String, Any}})
precompile(Tuple{typeof(Pkg.Display.print_diff), Base.TTY, Pkg.Types.Context, Array{Pkg.Display.DiffEntry, 1}, Bool})
precompile(Tuple{typeof(Pkg.GitTools.showprogress), Base.TTY, Pkg.GitTools.MiniProgressBar})
precompile(Tuple{typeof(Pkg.GitTools.transfer_progress), Ptr{LibGit2.TransferProgress}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Pkg.TOML.SOME), Array{String, 1}})
precompile(Tuple{typeof(Pkg.TOML.SOME), Pkg.TOML.Table})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, String, Array{String, 1}, Int64})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, String, String, Int64})
precompile(Tuple{typeof(Pkg.Types.checkout_rev!), LibGit2.GitRepo, String})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.TTY, Symbol, String})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Pkg.Types.Context, Symbol, String, String})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), Pkg.REPLMode.PkgCompletionProvider, REPL.LineEdit.PromptState})
precompile(Tuple{typeof(REPL.LineEdit.write_prompt), REPL.Terminals.TerminalBuffer, typeof(Pkg.REPLMode.promptf)})

@assert precompile(Tuple{typeof(Pkg.REPLMode.do_help!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}, REPL.LineEditREPL})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_status!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_add_or_develop!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}, Pkg.REPLMode.CommandKind})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_rm!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_up!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_pin!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_free!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_test!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})
@assert precompile(Tuple{typeof(Pkg.REPLMode.do_build!), Pkg.Types.Context, Vector{Pkg.REPLMode.Token}})

@assert precompile(Tuple{Type{Pkg.GraphType.GraphData}, Dict{UUID,Set{VersionNumber}},
       Dict{UUID,Dict{VersionRange,Dict{String,UUID}}},
       Dict{UUID,Dict{VersionRange,Dict{String,VersionSpec}}},
       Dict{UUID,String}})

@assert precompile(Tuple{Type{Pkg.GraphType.Graph},Dict{UUID,Set{VersionNumber}},
                                            Dict{UUID,Dict{VersionRange,Dict{String,UUID}}},
                                            Dict{UUID,Dict{VersionRange,Dict{String,VersionSpec}}},
                                            Dict{UUID,String},
                                            Requires,
                                            Dict{UUID,Pkg.Types.Fixed},
                                            Bool})

@assert precompile(Tuple{typeof(Pkg.Resolve.simplify_graph!), Pkg.GraphType.Graph, Set{Int}})
