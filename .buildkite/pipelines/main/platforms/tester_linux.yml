agents:
  queue: "julia"
  # Only run on `sandbox.jl` machines (not `docker`-isolated ones) since we need nestable sandboxing
  sandbox.jl: "true"
  os: "linux"
steps:
  - label: "tester_${PLATFORM?}${LABEL?}"
    key: tester_${PLATFORM?}${LABEL?}
    depends_on: package_${PLATFORM?}${ARCH?}
    plugins:
      - JuliaCI/julia#v1:
          # Drop default "registries" directory, so it is not persisted from execution to execution
          persist_depot_dirs: packages,artifacts,compiled
          version: '1.6'
      - staticfloat/sandbox#v1:
          rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/package_${PLATFORM?}.${ARCH_ROOTFS?}.tar.gz
          # rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/tester${PLATFORM?}.${ARCH_ROOTFS?}.tar.gz
          rootfs_treehash: "${ROOTFS_HASH?}"
          uid: 1000
          gid: 1000
          workspaces:
            # Include `/cache/repos` so that our `git` version introspection works.
            - "/cache/repos:/cache/repos"
    env:
      JULIA_SHELL: "/bin/bash"
    timeout_in_minutes: ${TIMEOUT?}
    soft_fail: ${ALLOW_FAIL?}
    commands: |
      echo "--- Print the full and short commit hashes"
      SHORT_COMMIT_LENGTH=10
      SHORT_COMMIT=`echo $${BUILDKITE_COMMIT:?} | cut -c1-$${SHORT_COMMIT_LENGTH:?}`
      JULIA_DIR="julia-$${SHORT_COMMIT:?}"
      JULIA_BINARY="$${JULIA_DIR:?}/bin/julia"
      ARTIFACT_FILE_EXTENSION="tar.gz"
      ARTIFACT_FILENAME="julia-$${SHORT_COMMIT:?}-${PLATFORM?}${ARCH?}.$${ARTIFACT_FILE_EXTENSION:?}"
      echo "The full commit is:                     $${BUILDKITE_COMMIT:?}"
      echo "The short commit is:                    $${SHORT_COMMIT:?}"
      echo "The artifact filename will be:    $${ARTIFACT_FILENAME:?}"
      echo "The Julia directory name will be: $${JULIA_DIR:?}"
      echo "The Julia binary will be:         $${JULIA_BINARY:?}"

      echo "--- Download build artifacts"
      rm -rf $${ARTIFACT_FILENAME:?}
      buildkite-agent artifact download $${ARTIFACT_FILENAME:?} .

      echo "--- Extract build artifacts"
      rm -rf $${JULIA_DIR:?}/
      tar xzf $${ARTIFACT_FILENAME:?} $${JULIA_DIR:?}/

      echo "--- Print Julia version info"
      $${JULIA_BINARY:?} -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
      echo "JULIA_CPU_THREADS is: $${JULIA_CPU_THREADS:?}"
      $${JULIA_BINARY:?} -e '@info "" Sys.CPU_THREADS'

      echo "--- Set some environment variables in preparation for running the Julia test suite"
      unset JULIA_DEPOT_PATH
      export OPENBLAS_NUM_THREADS=8
      export TESTS="[\"all\"]"

      if [[ "${IS_RR?}" == "yes" ]]; then
        export JULIA_BINARY_UNDER_RR="$${JULIA_BINARY:?} .buildkite/utilities/rr/rr_capture.jl $${JULIA_BINARY:?}"

        export JULIA_BINARY_FOR_TESTS="$${JULIA_BINARY_UNDER_RR:?}"
        export NCORES_FOR_TESTS="parse(Int, ENV[\"JULIA_RRCAPTURE_NUM_CORES\"])"

        # For the `rr` job, we disable multi-threading.
        export JULIA_NUM_THREADS=1
      else
        export JULIA_BINARY_FOR_TESTS="$${JULIA_BINARY:?}"
        export NCORES_FOR_TESTS="Sys.CPU_THREADS"

        if [[ "${IS_ST?}"   == "yes" ]]; then
          # "ST" = single-threaded
          export JULIA_NUM_THREADS=1
        elif [[ "${IS_MT?}" == "yes" ]]; then
          # "MT" = multi-threaded
          export JULIA_NUM_THREADS=16

          if [[ "$${BUILDKITE_PIPELINE_SLUG:?}"   == "julia-release-1-dot-6" ]]; then
            # On Julia 1.6, we skip the Distributed test suite if multithreading is enabled.
            export TESTS="[\"all\", \"--skip\", \"Distributed\"]"
          elif [[ "$${BUILDKITE_PIPELINE_SLUG:?}" == "julia-release-1-dot-7" ]]; then
            # On Julia 1.7, we skip the Distributed test suite if multithreading is enabled.
            export TESTS="[\"all\", \"--skip\", \"Distributed\"]"
          else
            # On Julia 1.8 and later, we do not skip any test suites.
            export TESTS="[\"all\"]"
          fi
        fi
      fi

      echo "JULIA_BINARY_FOR_TESTS is: $${JULIA_BINARY_FOR_TESTS:?}"
      echo "JULIA_NUM_THREADS is:      $${JULIA_NUM_THREADS}" # this variable might not be set
      echo "NCORES_FOR_TESTS is:       $${NCORES_FOR_TESTS:?}"
      echo "OPENBLAS_NUM_THREADS is:   $${OPENBLAS_NUM_THREADS:?}"
      echo "TESTS is:                  $${TESTS:?}"

      echo "--- Run the Julia test suite"
      $${JULIA_BINARY_FOR_TESTS:?} -e "Base.runtests($${TESTS:?}; ncores = $${NCORES_FOR_TESTS:?})"
