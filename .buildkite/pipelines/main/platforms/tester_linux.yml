agents:
  queue: "julia"
  # Only run on `sandbox.jl` machines (not `docker`-isolated ones) since we need nestable sandboxing
  sandbox.jl: "true"
  os: "linux"
steps:
  - label: "tester_${PLATFORM?}${LABEL?}"
    key: tester_${PLATFORM?}${LABEL?}
    depends_on: package_${PLATFORM?}${ARCH?}
    plugins:
      - JuliaCI/julia#v1:
          # Drop default "registries" directory, so it is not persisted from execution to execution
          persist_depot_dirs: packages,artifacts,compiled
          version: '1.6'
      - staticfloat/sandbox#v1:
          rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/package_${PLATFORM?}.${ARCH_ROOTFS?}.tar.gz
          # rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/${ROOTFS_TAG?}/tester${PLATFORM?}.${ARCH_ROOTFS?}.tar.gz
          rootfs_treehash: "${ROOTFS_HASH?}"
          uid: 1000
          gid: 1000
          workspaces:
            # Include `/cache/repos` so that our `git` version introspection works.
            - "/cache/repos:/cache/repos"
    env:
      JULIA_SHELL: "/bin/bash"
    timeout_in_minutes: ${TIMEOUT_BK?}
    retry:
      automatic:
        - exit_status: "*"
          limit: ${RETRIES?}
    soft_fail: ${ALLOW_FAIL?}
    commands: |
      echo "--- Print the full and short commit hashes"
      SHORT_COMMIT_LENGTH=10
      SHORT_COMMIT=`echo $${BUILDKITE_COMMIT:?} | cut -c1-$${SHORT_COMMIT_LENGTH:?}`
      JULIA_DIR="julia-$${SHORT_COMMIT:?}"
      JULIA_BINARY="$${JULIA_DIR:?}/bin/julia"
      ARTIFACT_FILE_EXTENSION="tar.gz"
      ARTIFACT_FILENAME="julia-$${SHORT_COMMIT:?}-${PLATFORM?}${ARCH?}.$${ARTIFACT_FILE_EXTENSION:?}"
      echo "The full commit is:                     $${BUILDKITE_COMMIT:?}"
      echo "The short commit is:                    $${SHORT_COMMIT:?}"
      echo "The artifact filename will be:    $${ARTIFACT_FILENAME:?}"
      echo "The Julia directory name will be: $${JULIA_DIR:?}"
      echo "The Julia binary will be:         $${JULIA_BINARY:?}"

      echo "--- Download build artifacts"
      rm -rf $${ARTIFACT_FILENAME:?}
      buildkite-agent artifact download $${ARTIFACT_FILENAME:?} .

      echo "--- Extract build artifacts"
      rm -rf $${JULIA_DIR:?}/
      tar xzf $${ARTIFACT_FILENAME:?} $${JULIA_DIR:?}/

      echo "--- Print Julia version info"
      $${JULIA_BINARY:?} -e 'using InteractiveUtils; InteractiveUtils.versioninfo()'
      echo "JULIA_CPU_THREADS is: $${JULIA_CPU_THREADS:?}"
      $${JULIA_BINARY:?} -e '@info "" Sys.CPU_THREADS'

      echo "--- Set some environment variables"
      export OPENBLAS_NUM_THREADS=8
      unset JULIA_DEPOT_PATH
      unset JULIA_PKG_SERVER

      # Make sure that temp files and temp directories are created in a location that is
      # backed by real storage.
      export TMPDIR="$(pwd)/tmp"
      mkdir -p $${TMPDIR:?}

      export NETWORK_RELATED_TESTS="Artifacts Downloads download LazyArtifacts LibGit2/online Pkg"

      if [[   "${GROUP?}" == "all" ]]; then
        export TESTS="all LibGit2/online --ci"
      elif [[   "${GROUP?}" == "all_except_pkg" ]]; then
        export TESTS="all LibGit2/online --ci --skip Pkg"
      elif [[   "${GROUP?}" == "g1" ]]; then
        # Group 1: ALL tests EXCEPT the network-related tests.
        export TESTS="all --ci --skip $${NETWORK_RELATED_TESTS:?}"
      elif [[ "${GROUP?}" == "g2" ]]; then
        # Group 2: ONLY the network-related tests.
        # In Group 2, we use whatever the default setting is with regards to the Pkg server.
        export TESTS="$${NETWORK_RELATED_TESTS:?} --ci"
      elif [[ "${GROUP?}" == "g3" ]]; then
        # Group 3: only Pkg.
        # In Group 3, we explicitly opt-out of the Pkg server.
        # The purpose of group 3 is to test the non-Pkg-server codepaths of Pkg.
        export TESTS="Pkg --ci"
        export JULIA_PKG_SERVER=""
      else
        echo "Invalid value for GROUP: ${GROUP?}"
        exit 1
      fi

      export JULIA_TEST_RR_TIMEOUT="${TIMEOUT_RR?}"

      if [[ "${IS_RR?}" == "yes" ]]; then
        export JULIA_CMD_FOR_TESTS="$${JULIA_BINARY:?} .buildkite/utilities/rr/rr_capture.jl $${JULIA_BINARY:?}"
        export NCORES_FOR_TESTS="parse(Int, ENV[\"JULIA_RRCAPTURE_NUM_CORES\"])"
      else
        export JULIA_CMD_FOR_TESTS="$${JULIA_BINARY:?}"
        export NCORES_FOR_TESTS="Sys.CPU_THREADS"
      fi

      if [[ "${IS_ST?}"   == "yes" ]]; then
        export JULIA_NUM_THREADS=1
      fi

      if [[ "${IS_MT?}" == "yes" ]]; then
        export JULIA_NUM_THREADS=16
      fi

      echo "--- Print the test group, list of test sets, and other useful environment variables"
      echo "JULIA_CMD_FOR_TESTS is:    $${JULIA_CMD_FOR_TESTS:?}"
      echo "JULIA_NUM_THREADS is:      $${JULIA_NUM_THREADS}" # Note: this environment variable might not be set
      echo "NCORES_FOR_TESTS is:       $${NCORES_FOR_TESTS:?}"
      echo "OPENBLAS_NUM_THREADS is:   $${OPENBLAS_NUM_THREADS:?}"
      echo "GROUP is:                  ${GROUP?}"
      echo "TESTS is:                  $${TESTS:?}"

      echo "--- Run the Julia test suite"
      $${JULIA_CMD_FOR_TESTS:?} -e "Base.runtests(\"$${TESTS:?}\"; ncores = $${NCORES_FOR_TESTS:?})"
