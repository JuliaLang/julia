agents:
  queue: "julia"
  # Only run on `sandbox.jl` machines (not `docker`-isolated ones) since we need nestable sandboxing
  sandbox.jl: "true"
  os: "linux"

steps:
  - label: "embedding"
    key: "embedding"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - staticfloat/sandbox#v1:
          rootfs_url: https://github.com/JuliaCI/rootfs-images/releases/download/v3.1/package_linux.x86_64.tar.gz
          rootfs_treehash: "8c33c341a864852629b8aac01a6eb6a79b73570e"
          uid: 1000
          gid: 1000
          workspaces:
            # Include `/cache/repos` so that our `git` version introspection works.
            - "/cache/repos:/cache/repos"
    commands: |
      echo "--- If this is a PR build, make sure that we are up-to-date with the base (target) branch"
      git config --global user.name "Julia CI"
      git config --global user.email "noreply@julialang.org"
      if [[ "$$BUILDKITE_PULL_REQUEST" != "false" ]] ; then
        git fetch origin
        echo "The base (target) branch is: $$BUILDKITE_PULL_REQUEST_BASE_BRANCH"
        git merge --no-edit origin/$$BUILDKITE_PULL_REQUEST_BASE_BRANCH
      fi

      echo "--- Print the full commit hash of the commit that we will actually test"
      export ACTUAL_BUILDKITE_COMMIT=`git rev-parse HEAD`
      echo "The original Buildkite commit is:    $$BUILDKITE_COMMIT"
      echo "The commit we will actually test is: $$ACTUAL_BUILDKITE_COMMIT"

      prefix="/tmp/prefix"
      echo "--- Build julia, deploy to $${prefix}"
      make -j$${JULIA_NUM_CORES} JULIA_PRECOMPILE=0 prefix=$${prefix} install

      embedding_output="/tmp/embedding-test"
      echo "--- Run embedding tests, deploy to $${embedding_output}"
      mkdir -p "$${embedding_output}"
      make -j$${JULIA_NUM_CORES} -C test/embedding JULIA="$${prefix}/bin/julia" BIN="$${embedding_output}"

    timeout_in_minutes: 60
    notify:
      - github_commit_status:
          context: "embedding"
